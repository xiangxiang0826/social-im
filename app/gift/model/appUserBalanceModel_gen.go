// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGvaXiangxiangAppUserBalanceIdPrefix      = "cache:gvaXiangxiang:appUserBalance:id:"
	cacheGvaXiangxiangAppUserBalanceUidTypePrefix = "cache:gvaXiangxiang:appUserBalance:uid:type:"
	cacheGvaXiangxiangAppUserBalanceUidPrefix     = "cache:gvaXiangxiang:appUserBalance:uid:"
)

type (
	appUserBalanceModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *AppUserBalance) error

		FindOne(ctx context.Context, id int64) (*AppUserBalance, error)
		FindOneByUidType(ctx context.Context, uid int64, tp int64) (*AppUserBalance, error)
		Update(ctx context.Context, tx *gorm.DB, data *AppUserBalance) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultAppUserBalanceModel struct {
		gormc.CachedConn
		table string
	}

	AppUserBalance struct {
		Id        int64     `gorm:"column:id"`
		Uid       int64     `gorm:"column:uid"`        // 用户id
		Balance   int64     `gorm:"column:balance"`    // 用户余额
		Type      int64     `gorm:"column:type"`       // 余额类型 1钻石 2金币 3魅力值
		CreatedAt time.Time `gorm:"column:created_at"` // 创建时间
		UpdatedAt time.Time `gorm:"column:updated_at"` // 更新时间
	}
)

func (AppUserBalance) TableName() string {
	return "`app_user_balance`"
}

func newAppUserBalanceModel(conn *gorm.DB, c cache.CacheConf) *defaultAppUserBalanceModel {
	return &defaultAppUserBalanceModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`app_user_balance`",
	}
}

func (m *defaultAppUserBalanceModel) Insert(ctx context.Context, tx *gorm.DB, data *AppUserBalance) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppUserBalanceModel) FindOne(ctx context.Context, id int64) (*AppUserBalance, error) {
	gvaXiangxiangAppUserBalanceIdKey := fmt.Sprintf("%s%v", cacheGvaXiangxiangAppUserBalanceIdPrefix, id)
	var resp AppUserBalance
	err := m.QueryCtx(ctx, &resp, gvaXiangxiangAppUserBalanceIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&AppUserBalance{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserBalanceModel) FindOneByUidType(ctx context.Context, uid int64, tp int64) (*AppUserBalance, error) {
	gvaXiangxiangAppUserBalanceUidTypeKey := fmt.Sprintf("%s%v:%v", cacheGvaXiangxiangAppUserBalanceUidTypePrefix, uid, tp)
	var resp AppUserBalance
	err := m.QueryRowIndexCtx(ctx, &resp, gvaXiangxiangAppUserBalanceUidTypeKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&AppUserBalance{}).Where("`uid` = ? and `type` = ?", uid, tp).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserBalanceModel) Update(ctx context.Context, tx *gorm.DB, data *AppUserBalance) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultAppUserBalanceModel) getCacheKeys(data *AppUserBalance) []string {
	if data == nil {
		return []string{}
	}
	gvaXiangxiangAppUserBalanceIdKey := fmt.Sprintf("%s%v", cacheGvaXiangxiangAppUserBalanceIdPrefix, data.Id)
	gvaXiangxiangAppUserBalanceUidTypeKey := fmt.Sprintf("%s%v:%v", cacheGvaXiangxiangAppUserBalanceUidTypePrefix, data.Uid, data.Type)
	gvaXiangxiangAppUserBalanceUidKey := fmt.Sprintf("%s%v", cacheGvaXiangxiangAppUserBalanceUidPrefix, data.Uid)
	cacheKeys := []string{
		gvaXiangxiangAppUserBalanceIdKey, gvaXiangxiangAppUserBalanceUidTypeKey, gvaXiangxiangAppUserBalanceUidKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultAppUserBalanceModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&AppUserBalance{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppUserBalanceModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultAppUserBalanceModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGvaXiangxiangAppUserBalanceIdPrefix, primary)
}

func (m *defaultAppUserBalanceModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&AppUserBalance{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultAppUserBalanceModel) tableName() string {
	return m.table
}
