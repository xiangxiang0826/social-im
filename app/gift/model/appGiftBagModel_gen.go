// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGvaXiangxiangAppGiftBagIdPrefix        = "cache:gvaXiangxiang:appGiftBag:id:"
	cacheGvaXiangxiangAppGiftBagUidGiftIdPrefix = "cache:gvaXiangxiang:appGiftBag:uid:giftId:"
)

type (
	appGiftBagModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *AppGiftBag) error

		FindOne(ctx context.Context, id int64) (*AppGiftBag, error)
		FindOneByUidGiftId(ctx context.Context, uid int64, giftId int64) (*AppGiftBag, error)
		Update(ctx context.Context, tx *gorm.DB, data *AppGiftBag) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultAppGiftBagModel struct {
		gormc.CachedConn
		table string
	}

	AppGiftBag struct {
		Id        int64     `gorm:"column:id"`
		Uid       int64     `gorm:"column:uid"`        // 用户id
		GiftId    int64     `gorm:"column:gift_id"`    // 礼物id
		GiftCount int64     `gorm:"column:gift_count"` // 礼物数量
		CreatedAt time.Time `gorm:"column:created_at"` // 创建时间
		UpdatedAt time.Time `gorm:"column:updated_at"` // 更新时间
		Status    int64     `gorm:"column:status"`     // 状态
	}
)

func (AppGiftBag) TableName() string {
	return "`app_gift_bag`"
}

func newAppGiftBagModel(conn *gorm.DB, c cache.CacheConf) *defaultAppGiftBagModel {
	return &defaultAppGiftBagModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`app_gift_bag`",
	}
}

func (m *defaultAppGiftBagModel) Insert(ctx context.Context, tx *gorm.DB, data *AppGiftBag) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppGiftBagModel) FindOne(ctx context.Context, id int64) (*AppGiftBag, error) {
	gvaXiangxiangAppGiftBagIdKey := fmt.Sprintf("%s%v", cacheGvaXiangxiangAppGiftBagIdPrefix, id)
	var resp AppGiftBag
	err := m.QueryCtx(ctx, &resp, gvaXiangxiangAppGiftBagIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&AppGiftBag{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppGiftBagModel) FindOneByUidGiftId(ctx context.Context, uid int64, giftId int64) (*AppGiftBag, error) {
	gvaXiangxiangAppGiftBagUidGiftIdKey := fmt.Sprintf("%s%v:%v", cacheGvaXiangxiangAppGiftBagUidGiftIdPrefix, uid, giftId)
	var resp AppGiftBag
	err := m.QueryRowIndexCtx(ctx, &resp, gvaXiangxiangAppGiftBagUidGiftIdKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&AppGiftBag{}).Where("`uid` = ? and `gift_id` = ?", uid, giftId).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppGiftBagModel) Update(ctx context.Context, tx *gorm.DB, data *AppGiftBag) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultAppGiftBagModel) getCacheKeys(data *AppGiftBag) []string {
	if data == nil {
		return []string{}
	}
	gvaXiangxiangAppGiftBagIdKey := fmt.Sprintf("%s%v", cacheGvaXiangxiangAppGiftBagIdPrefix, data.Id)
	gvaXiangxiangAppGiftBagUidGiftIdKey := fmt.Sprintf("%s%v:%v", cacheGvaXiangxiangAppGiftBagUidGiftIdPrefix, data.Uid, data.GiftId)
	cacheKeys := []string{
		gvaXiangxiangAppGiftBagIdKey, gvaXiangxiangAppGiftBagUidGiftIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultAppGiftBagModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&AppGiftBag{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppGiftBagModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultAppGiftBagModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGvaXiangxiangAppGiftBagIdPrefix, primary)
}

func (m *defaultAppGiftBagModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&AppGiftBag{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultAppGiftBagModel) tableName() string {
	return m.table
}
