// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGvaXiangxiangAppGiftFlowIdPrefix    = "cache:gvaXiangxiang:appGiftFlow:id:"
	cacheGvaXiangxiangAppGiftFlowToUidPrefix = "cache:gvaXiangxiang:appGiftFlow:toUid:"
	cacheGvaXiangxiangAppGiftFlowByMessagePrefix = "cache:gvaXiangxiang:appGiftFlow:bymessage:"
	cacheGvaXiangxiangAppGiftFlowByAttrStatusPrefix = "cache:gvaXiangxiang:appGiftFlow:byattrstatus"
)

type (
	appGiftFlowModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *AppGiftFlow) error

		FindOne(ctx context.Context, id int64) (*AppGiftFlow, error)
		FindOneByToUid(ctx context.Context, toUid int64) (*AppGiftFlow, error)
		Update(ctx context.Context, tx *gorm.DB, data *AppGiftFlow) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultAppGiftFlowModel struct {
		gormc.CachedConn
		table string
	}

	AppGiftFlow struct {
		Id        int64     `gorm:"column:id"`
		FromUid   int64     `gorm:"column:from_uid"`
		ToUid     int64     `gorm:"column:to_uid"`
		GiftId    int64     `gorm:"column:gift_id"`
		GiftCount int64     `gorm:"column:gift_count"`
		GiftAttr  string    `gorm:"column:gift_attr"`
		Status    int64     `gorm:"column:status"`
		AttrStatus    int64     `gorm:"column:attr_status"`
		CreatedAt time.Time `gorm:"column:created_at"`
		UpdatedAt time.Time `gorm:"column:updated_at"`
	}

	AppGiftAttr struct {
		Gold	int64				//金币	1
		Diamond int64				//钻石  2
		Charm	int64				//魅力值 3
	}
)

func (AppGiftFlow) TableName() string {
	return "`app_gift_flow`"
}

func newAppGiftFlowModel(conn *gorm.DB, c cache.CacheConf) *defaultAppGiftFlowModel {
	return &defaultAppGiftFlowModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`app_gift_flow`",
	}
}

func (m *defaultAppGiftFlowModel) Insert(ctx context.Context, tx *gorm.DB, data *AppGiftFlow) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppGiftFlowModel) FindOne(ctx context.Context, id int64) (*AppGiftFlow, error) {
	gvaXiangxiangAppGiftFlowIdKey := fmt.Sprintf("%s%v", cacheGvaXiangxiangAppGiftFlowIdPrefix, id)
	var resp AppGiftFlow
	err := m.QueryCtx(ctx, &resp, gvaXiangxiangAppGiftFlowIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&AppGiftFlow{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppGiftFlowModel) FindOneByToUid(ctx context.Context, toUid int64) (*AppGiftFlow, error) {
	gvaXiangxiangAppGiftFlowToUidKey := fmt.Sprintf("%s%v", cacheGvaXiangxiangAppGiftFlowToUidPrefix, toUid)
	var resp AppGiftFlow
	err := m.QueryRowIndexCtx(ctx, &resp, gvaXiangxiangAppGiftFlowToUidKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&AppGiftFlow{}).Where("`to_uid` = ?", toUid).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppGiftFlowModel) Update(ctx context.Context, tx *gorm.DB, data *AppGiftFlow) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultAppGiftFlowModel) getCacheKeys(data *AppGiftFlow) []string {
	if data == nil {
		return []string{}
	}
	gvaXiangxiangAppGiftFlowIdKey := fmt.Sprintf("%s%v", cacheGvaXiangxiangAppGiftFlowIdPrefix, data.Id)
	gvaXiangxiangAppGiftFlowToUidKey := fmt.Sprintf("%s%v", cacheGvaXiangxiangAppGiftFlowToUidPrefix, data.ToUid)
	gvaXiangxiangAppGiftFlowByMessageKey := fmt.Sprintf("%s_%v_%v_%v_%v", cacheGvaXiangxiangAppGiftFlowByMessagePrefix, data.FromUid, data.ToUid, data.GiftId, data.GiftCount)
	gvaXiangxiangAppGiftFlowByAttrStatusKey := fmt.Sprintf("%s_%v_%v_%v_%v", cacheGvaXiangxiangAppGiftFlowByAttrStatusPrefix, data.FromUid, data.ToUid, data.GiftId, data.GiftCount)
	cacheKeys := []string{
		gvaXiangxiangAppGiftFlowIdKey, gvaXiangxiangAppGiftFlowToUidKey, gvaXiangxiangAppGiftFlowByMessageKey, gvaXiangxiangAppGiftFlowByAttrStatusKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultAppGiftFlowModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&AppGiftFlow{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppGiftFlowModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultAppGiftFlowModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGvaXiangxiangAppGiftFlowIdPrefix, primary)
}

func (m *defaultAppGiftFlowModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&AppGiftFlow{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultAppGiftFlowModel) tableName() string {
	return m.table
}
