// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: adminRpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminRpcClient is the client API for AdminRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminRpcClient interface {
	BackgroundImageList(ctx context.Context, in *BackgroundImgReq, opts ...grpc.CallOption) (*BackgroundImgResp, error)
	DictionaryList(ctx context.Context, in *DictionaryGetReq, opts ...grpc.CallOption) (*DictionaryGetResp, error)
	ProjectConfigDetail(ctx context.Context, in *ProjectConfigDetailReq, opts ...grpc.CallOption) (*ProjectConfigDetailResp, error)
	GiftList(ctx context.Context, in *GiftListReq, opts ...grpc.CallOption) (*GiftListResp, error)
	GiftItem(ctx context.Context, in *GiftItemReq, opts ...grpc.CallOption) (*GiftItemResp, error)
	AreaList(ctx context.Context, in *AreaListReq, opts ...grpc.CallOption) (*AreaListResp, error)
}

type adminRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminRpcClient(cc grpc.ClientConnInterface) AdminRpcClient {
	return &adminRpcClient{cc}
}

func (c *adminRpcClient) BackgroundImageList(ctx context.Context, in *BackgroundImgReq, opts ...grpc.CallOption) (*BackgroundImgResp, error) {
	out := new(BackgroundImgResp)
	err := c.cc.Invoke(ctx, "/pb.adminRpc/backgroundImageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRpcClient) DictionaryList(ctx context.Context, in *DictionaryGetReq, opts ...grpc.CallOption) (*DictionaryGetResp, error) {
	out := new(DictionaryGetResp)
	err := c.cc.Invoke(ctx, "/pb.adminRpc/dictionaryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRpcClient) ProjectConfigDetail(ctx context.Context, in *ProjectConfigDetailReq, opts ...grpc.CallOption) (*ProjectConfigDetailResp, error) {
	out := new(ProjectConfigDetailResp)
	err := c.cc.Invoke(ctx, "/pb.adminRpc/projectConfigDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRpcClient) GiftList(ctx context.Context, in *GiftListReq, opts ...grpc.CallOption) (*GiftListResp, error) {
	out := new(GiftListResp)
	err := c.cc.Invoke(ctx, "/pb.adminRpc/giftList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRpcClient) GiftItem(ctx context.Context, in *GiftItemReq, opts ...grpc.CallOption) (*GiftItemResp, error) {
	out := new(GiftItemResp)
	err := c.cc.Invoke(ctx, "/pb.adminRpc/giftItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRpcClient) AreaList(ctx context.Context, in *AreaListReq, opts ...grpc.CallOption) (*AreaListResp, error) {
	out := new(AreaListResp)
	err := c.cc.Invoke(ctx, "/pb.adminRpc/areaList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminRpcServer is the server API for AdminRpc service.
// All implementations must embed UnimplementedAdminRpcServer
// for forward compatibility
type AdminRpcServer interface {
	BackgroundImageList(context.Context, *BackgroundImgReq) (*BackgroundImgResp, error)
	DictionaryList(context.Context, *DictionaryGetReq) (*DictionaryGetResp, error)
	ProjectConfigDetail(context.Context, *ProjectConfigDetailReq) (*ProjectConfigDetailResp, error)
	GiftList(context.Context, *GiftListReq) (*GiftListResp, error)
	GiftItem(context.Context, *GiftItemReq) (*GiftItemResp, error)
	AreaList(context.Context, *AreaListReq) (*AreaListResp, error)
	mustEmbedUnimplementedAdminRpcServer()
}

// UnimplementedAdminRpcServer must be embedded to have forward compatible implementations.
type UnimplementedAdminRpcServer struct {
}

func (UnimplementedAdminRpcServer) BackgroundImageList(context.Context, *BackgroundImgReq) (*BackgroundImgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackgroundImageList not implemented")
}
func (UnimplementedAdminRpcServer) DictionaryList(context.Context, *DictionaryGetReq) (*DictionaryGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionaryList not implemented")
}
func (UnimplementedAdminRpcServer) ProjectConfigDetail(context.Context, *ProjectConfigDetailReq) (*ProjectConfigDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectConfigDetail not implemented")
}
func (UnimplementedAdminRpcServer) GiftList(context.Context, *GiftListReq) (*GiftListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiftList not implemented")
}
func (UnimplementedAdminRpcServer) GiftItem(context.Context, *GiftItemReq) (*GiftItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiftItem not implemented")
}
func (UnimplementedAdminRpcServer) AreaList(context.Context, *AreaListReq) (*AreaListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaList not implemented")
}
func (UnimplementedAdminRpcServer) mustEmbedUnimplementedAdminRpcServer() {}

// UnsafeAdminRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminRpcServer will
// result in compilation errors.
type UnsafeAdminRpcServer interface {
	mustEmbedUnimplementedAdminRpcServer()
}

func RegisterAdminRpcServer(s grpc.ServiceRegistrar, srv AdminRpcServer) {
	s.RegisterService(&AdminRpc_ServiceDesc, srv)
}

func _AdminRpc_BackgroundImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackgroundImgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRpcServer).BackgroundImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.adminRpc/backgroundImageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRpcServer).BackgroundImageList(ctx, req.(*BackgroundImgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRpc_DictionaryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRpcServer).DictionaryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.adminRpc/dictionaryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRpcServer).DictionaryList(ctx, req.(*DictionaryGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRpc_ProjectConfigDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectConfigDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRpcServer).ProjectConfigDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.adminRpc/projectConfigDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRpcServer).ProjectConfigDetail(ctx, req.(*ProjectConfigDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRpc_GiftList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRpcServer).GiftList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.adminRpc/giftList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRpcServer).GiftList(ctx, req.(*GiftListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRpc_GiftItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRpcServer).GiftItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.adminRpc/giftItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRpcServer).GiftItem(ctx, req.(*GiftItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRpc_AreaList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRpcServer).AreaList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.adminRpc/areaList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRpcServer).AreaList(ctx, req.(*AreaListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminRpc_ServiceDesc is the grpc.ServiceDesc for AdminRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.adminRpc",
	HandlerType: (*AdminRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "backgroundImageList",
			Handler:    _AdminRpc_BackgroundImageList_Handler,
		},
		{
			MethodName: "dictionaryList",
			Handler:    _AdminRpc_DictionaryList_Handler,
		},
		{
			MethodName: "projectConfigDetail",
			Handler:    _AdminRpc_ProjectConfigDetail_Handler,
		},
		{
			MethodName: "giftList",
			Handler:    _AdminRpc_GiftList_Handler,
		},
		{
			MethodName: "giftItem",
			Handler:    _AdminRpc_GiftItem_Handler,
		},
		{
			MethodName: "areaList",
			Handler:    _AdminRpc_AreaList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adminRpc.proto",
}
