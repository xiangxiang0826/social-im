// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGvaXiangxiangGiftIdPrefix = "cache:gvaXiangxiang:gift:id:"
)

type (
	giftModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Gift) error

		FindOne(ctx context.Context, id int64) (*Gift, error)
		Update(ctx context.Context, tx *gorm.DB, data *Gift) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultGiftModel struct {
		gormc.CachedConn
		table string
	}

	Gift struct {
		Id                int64          `gorm:"column:id"`
		CreatedAt         time.Time   `gorm:"column:created_at"`
		UpdatedAt         time.Time   `gorm:"column:updated_at"`
		DeletedAt         time.Time `gorm:"column:deleted_at;index"`
		ChargeNum         int64  `gorm:"column:charge_num"`          // 货币数量
		Currency          int64  `gorm:"column:currency"`            // 货币种类
		GiftName          string `gorm:"column:gift_name"`           // 礼物名称
		ImgUrl            string `gorm:"column:img_url"`             // 礼物图标地址
		GiftAttr            string `gorm:"column:gift_sub_attr"`             // 礼物的附加属性
		NextGiveInterval  int64  `gorm:"column:next_give_interval"`  // 距离下次送礼物的间隔时间（s)
		SpecialEffectsUrl string `gorm:"column:special_effects_url"` // 礼物特效地址
	}
)

func (Gift) TableName() string {
	return "`gift`"
}

func newGiftModel(conn *gorm.DB, c cache.CacheConf) *defaultGiftModel {
	return &defaultGiftModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`gift`",
	}
}

func (m *defaultGiftModel) Insert(ctx context.Context, tx *gorm.DB, data *Gift) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultGiftModel) FindOne(ctx context.Context, id int64) (*Gift, error) {
	gvaXiangxiangGiftIdKey := fmt.Sprintf("%s%v", cacheGvaXiangxiangGiftIdPrefix, id)
	var resp Gift
	err := m.QueryCtx(ctx, &resp, gvaXiangxiangGiftIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&Gift{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGiftModel) Update(ctx context.Context, tx *gorm.DB, data *Gift) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultGiftModel) getCacheKeys(data *Gift) []string {
	if data == nil {
		return []string{}
	}
	gvaXiangxiangGiftIdKey := fmt.Sprintf("%s%v", cacheGvaXiangxiangGiftIdPrefix, data.Id)
	cacheKeys := []string{
		gvaXiangxiangGiftIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultGiftModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&Gift{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultGiftModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultGiftModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGvaXiangxiangGiftIdPrefix, primary)
}

func (m *defaultGiftModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&Gift{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultGiftModel) tableName() string {
	return m.table
}
