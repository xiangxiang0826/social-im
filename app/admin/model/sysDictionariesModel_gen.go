// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGvaSysDictionariesIdPrefix = "cache:gva:sysDictionaries:id:"
)

type (
	sysDictionariesModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *SysDictionaries) error

		FindOne(ctx context.Context, id int64) (*SysDictionaries, error)
		Update(ctx context.Context, tx *gorm.DB, data *SysDictionaries) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultSysDictionariesModel struct {
		gormc.CachedConn
		table string
	}

	SysDictionaries struct {
		Id        int64          `gorm:"column:id"`
		CreatedAt sql.NullTime   `gorm:"column:created_at"`
		UpdatedAt sql.NullTime   `gorm:"column:updated_at"`
		DeletedAt gorm.DeletedAt `gorm:"column:deleted_at;index"`
		Name      sql.NullString `gorm:"column:name"`   // 字典名（中）
		Type      sql.NullString `gorm:"column:type"`   // 字典名（英）
		Status    sql.NullInt64  `gorm:"column:status"` // 状态
		Desc      sql.NullString `gorm:"column:desc"`   // 描述
	}
)

func (SysDictionaries) TableName() string {
	return "`sys_dictionaries`"
}

func newSysDictionariesModel(conn *gorm.DB, c cache.CacheConf) *defaultSysDictionariesModel {
	return &defaultSysDictionariesModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`sys_dictionaries`",
	}
}

func (m *defaultSysDictionariesModel) Insert(ctx context.Context, tx *gorm.DB, data *SysDictionaries) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultSysDictionariesModel) FindOne(ctx context.Context, id int64) (*SysDictionaries, error) {
	gvaSysDictionariesIdKey := fmt.Sprintf("%s%v", cacheGvaSysDictionariesIdPrefix, id)
	var resp SysDictionaries
	err := m.QueryCtx(ctx, &resp, gvaSysDictionariesIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&SysDictionaries{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysDictionariesModel) Update(ctx context.Context, tx *gorm.DB, data *SysDictionaries) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultSysDictionariesModel) getCacheKeys(data *SysDictionaries) []string {
	if data == nil {
		return []string{}
	}
	gvaSysDictionariesIdKey := fmt.Sprintf("%s%v", cacheGvaSysDictionariesIdPrefix, data.Id)
	cacheKeys := []string{
		gvaSysDictionariesIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultSysDictionariesModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&SysDictionaries{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultSysDictionariesModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultSysDictionariesModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGvaSysDictionariesIdPrefix, primary)
}

func (m *defaultSysDictionariesModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&SysDictionaries{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultSysDictionariesModel) tableName() string {
	return m.table
}
