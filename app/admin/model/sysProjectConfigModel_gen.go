// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGvaSysProjectConfigIdPrefix                  = "cache:gva:sysProjectConfig:id:"
	cacheGvaSysProjectConfigConfigKeyConfigTypePrefix = "cache:gva:sysProjectConfig:configKey:configType:"
)

type (
	sysProjectConfigModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *SysProjectConfig) error

		FindOne(ctx context.Context, id int64) (*SysProjectConfig, error)
		FindOneByConfigKeyConfigType(ctx context.Context, configKey string, configType int64) (*SysProjectConfig, error)
		Update(ctx context.Context, tx *gorm.DB, data *SysProjectConfig) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultSysProjectConfigModel struct {
		gormc.CachedConn
		table string
	}

	SysProjectConfig struct {
		Id          int64          `gorm:"column:id"`
		CreatedAt   sql.NullTime   `gorm:"column:created_at"`
		UpdatedAt   sql.NullTime   `gorm:"column:updated_at"`
		DeletedAt   gorm.DeletedAt `gorm:"column:deleted_at;index"`
		ConfigName  string         `gorm:"column:config_name"`  // 配置名称
		ConfigKey   string         `gorm:"column:config_key"`   // 配置健
		ConfigValue string         `gorm:"column:config_value"` // 配置值
		ConfigType  int64          `gorm:"column:config_type"`  // 配置类型(1:派对)
		CreatedBy   int64          `gorm:"column:created_by"`   // 创建者
		UpdatedBy   int64          `gorm:"column:updated_by"`   // 更新者
		DeletedBy   int64          `gorm:"column:deleted_by"`   // 删除者
	}
)

func (SysProjectConfig) TableName() string {
	return "`sys_project_config`"
}

func newSysProjectConfigModel(conn *gorm.DB, c cache.CacheConf) *defaultSysProjectConfigModel {
	return &defaultSysProjectConfigModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`sys_project_config`",
	}
}

func (m *defaultSysProjectConfigModel) Insert(ctx context.Context, tx *gorm.DB, data *SysProjectConfig) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultSysProjectConfigModel) FindOne(ctx context.Context, id int64) (*SysProjectConfig, error) {
	gvaSysProjectConfigIdKey := fmt.Sprintf("%s%v", cacheGvaSysProjectConfigIdPrefix, id)
	var resp SysProjectConfig
	err := m.QueryCtx(ctx, &resp, gvaSysProjectConfigIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&SysProjectConfig{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysProjectConfigModel) FindOneByConfigKeyConfigType(ctx context.Context, configKey string, configType int64) (*SysProjectConfig, error) {
	gvaSysProjectConfigConfigKeyConfigTypeKey := fmt.Sprintf("%s%v:%v", cacheGvaSysProjectConfigConfigKeyConfigTypePrefix, configKey, configType)
	var resp SysProjectConfig
	err := m.QueryRowIndexCtx(ctx, &resp, gvaSysProjectConfigConfigKeyConfigTypeKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&SysProjectConfig{}).Where("`config_key` = ? and `config_type` = ?", configKey, configType).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysProjectConfigModel) Update(ctx context.Context, tx *gorm.DB, data *SysProjectConfig) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultSysProjectConfigModel) getCacheKeys(data *SysProjectConfig) []string {
	if data == nil {
		return []string{}
	}
	gvaSysProjectConfigConfigKeyConfigTypeKey := fmt.Sprintf("%s%v:%v", cacheGvaSysProjectConfigConfigKeyConfigTypePrefix, data.ConfigKey, data.ConfigType)
	gvaSysProjectConfigIdKey := fmt.Sprintf("%s%v", cacheGvaSysProjectConfigIdPrefix, data.Id)
	cacheKeys := []string{
		gvaSysProjectConfigConfigKeyConfigTypeKey, gvaSysProjectConfigIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultSysProjectConfigModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&SysProjectConfig{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultSysProjectConfigModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultSysProjectConfigModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGvaSysProjectConfigIdPrefix, primary)
}

func (m *defaultSysProjectConfigModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&SysProjectConfig{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultSysProjectConfigModel) tableName() string {
	return m.table
}
