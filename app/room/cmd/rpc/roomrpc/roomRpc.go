// Code generated by goctl. DO NOT EDIT.
// Source: roomRpc.proto

package roomrpc

import (
	"context"

	"social-im/app/room/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	PartyBackGroundImgUpdateReq  = pb.PartyBackGroundImgUpdateReq
	PartyBackGroundImgUpdateResp = pb.PartyBackGroundImgUpdateResp
	PartyCreateReq               = pb.PartyCreateReq
	PartyCreateResp              = pb.PartyCreateResp
	PartyInfo                    = pb.PartyInfo
	PartyJoinReq                 = pb.PartyJoinReq
	PartyJoinResp                = pb.PartyJoinResp
	PartyLeaveReq                = pb.PartyLeaveReq
	PartyLeaveResp               = pb.PartyLeaveResp
	PartyListReq                 = pb.PartyListReq
	PartyListResp                = pb.PartyListResp
	PartyNameUpdateReq           = pb.PartyNameUpdateReq
	PartyNameUpdateResp          = pb.PartyNameUpdateResp
	PartyRemoveReq               = pb.PartyRemoveReq
	PartyRemoveResp              = pb.PartyRemoveResp
	PartyTerminateReq            = pb.PartyTerminateReq
	PartyTerminateResp           = pb.PartyTerminateResp
	ProhibitionCreateReq         = pb.ProhibitionCreateReq
	ProhibitionCreateResp        = pb.ProhibitionCreateResp
	ProhibitionGetReq            = pb.ProhibitionGetReq
	ProhibitionGetResp           = pb.ProhibitionGetResp
	ProhibitionInfo              = pb.ProhibitionInfo
	ProhibitionListReq           = pb.ProhibitionListReq
	ProhibitionListResp          = pb.ProhibitionListResp
	ProhibitionRemoveReq         = pb.ProhibitionRemoveReq
	ProhibitionRemoveResp        = pb.ProhibitionRemoveResp
	RoomLimitReq                 = pb.RoomLimitReq
	RoomLimitResp                = pb.RoomLimitResp
	RoominfoReq                  = pb.RoominfoReq
	RoominfoResq                 = pb.RoominfoResq
	UserInfo                     = pb.UserInfo
	UserNumReportReq             = pb.UserNumReportReq
	UserNumReportResp            = pb.UserNumReportResp

	RoomRpc interface {
		Create(ctx context.Context, in *PartyCreateReq, opts ...grpc.CallOption) (*PartyCreateResp, error)
		RoomLimitGet(ctx context.Context, in *RoomLimitReq, opts ...grpc.CallOption) (*RoomLimitResp, error)
		Join(ctx context.Context, in *PartyJoinReq, opts ...grpc.CallOption) (*PartyJoinResp, error)
		Leave(ctx context.Context, in *PartyLeaveReq, opts ...grpc.CallOption) (*PartyLeaveResp, error)
		Remove(ctx context.Context, in *PartyRemoveReq, opts ...grpc.CallOption) (*PartyRemoveResp, error)
		PartyList(ctx context.Context, in *PartyListReq, opts ...grpc.CallOption) (*PartyListResp, error)
		UserOnlineNumReport(ctx context.Context, in *UserNumReportReq, opts ...grpc.CallOption) (*UserNumReportResp, error)
		RoominfoById(ctx context.Context, in *RoominfoReq, opts ...grpc.CallOption) (*RoominfoResq, error)
		UpdatePartyName(ctx context.Context, in *PartyNameUpdateReq, opts ...grpc.CallOption) (*PartyNameUpdateResp, error)
		UpdatePartyBackgroundImg(ctx context.Context, in *PartyBackGroundImgUpdateReq, opts ...grpc.CallOption) (*PartyBackGroundImgUpdateResp, error)
		ProhibitionUserAdd(ctx context.Context, in *ProhibitionCreateReq, opts ...grpc.CallOption) (*ProhibitionCreateResp, error)
		ProhibitionUserRemove(ctx context.Context, in *ProhibitionRemoveReq, opts ...grpc.CallOption) (*ProhibitionRemoveResp, error)
		ProhibitionList(ctx context.Context, in *ProhibitionListReq, opts ...grpc.CallOption) (*ProhibitionListResp, error)
		Terminate(ctx context.Context, in *PartyTerminateReq, opts ...grpc.CallOption) (*PartyTerminateResp, error)
		ProhibitionUserInfo(ctx context.Context, in *ProhibitionGetReq, opts ...grpc.CallOption) (*ProhibitionGetResp, error)
	}

	defaultRoomRpc struct {
		cli zrpc.Client
	}
)

func NewRoomRpc(cli zrpc.Client) RoomRpc {
	return &defaultRoomRpc{
		cli: cli,
	}
}

func (m *defaultRoomRpc) Create(ctx context.Context, in *PartyCreateReq, opts ...grpc.CallOption) (*PartyCreateResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultRoomRpc) RoomLimitGet(ctx context.Context, in *RoomLimitReq, opts ...grpc.CallOption) (*RoomLimitResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.RoomLimitGet(ctx, in, opts...)
}

func (m *defaultRoomRpc) Join(ctx context.Context, in *PartyJoinReq, opts ...grpc.CallOption) (*PartyJoinResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.Join(ctx, in, opts...)
}

func (m *defaultRoomRpc) Leave(ctx context.Context, in *PartyLeaveReq, opts ...grpc.CallOption) (*PartyLeaveResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.Leave(ctx, in, opts...)
}

func (m *defaultRoomRpc) Remove(ctx context.Context, in *PartyRemoveReq, opts ...grpc.CallOption) (*PartyRemoveResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.Remove(ctx, in, opts...)
}

func (m *defaultRoomRpc) PartyList(ctx context.Context, in *PartyListReq, opts ...grpc.CallOption) (*PartyListResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.PartyList(ctx, in, opts...)
}

func (m *defaultRoomRpc) UserOnlineNumReport(ctx context.Context, in *UserNumReportReq, opts ...grpc.CallOption) (*UserNumReportResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.UserOnlineNumReport(ctx, in, opts...)
}

func (m *defaultRoomRpc) RoominfoById(ctx context.Context, in *RoominfoReq, opts ...grpc.CallOption) (*RoominfoResq, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.RoominfoById(ctx, in, opts...)
}

func (m *defaultRoomRpc) UpdatePartyName(ctx context.Context, in *PartyNameUpdateReq, opts ...grpc.CallOption) (*PartyNameUpdateResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.UpdatePartyName(ctx, in, opts...)
}

func (m *defaultRoomRpc) UpdatePartyBackgroundImg(ctx context.Context, in *PartyBackGroundImgUpdateReq, opts ...grpc.CallOption) (*PartyBackGroundImgUpdateResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.UpdatePartyBackgroundImg(ctx, in, opts...)
}

func (m *defaultRoomRpc) ProhibitionUserAdd(ctx context.Context, in *ProhibitionCreateReq, opts ...grpc.CallOption) (*ProhibitionCreateResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.ProhibitionUserAdd(ctx, in, opts...)
}

func (m *defaultRoomRpc) ProhibitionUserRemove(ctx context.Context, in *ProhibitionRemoveReq, opts ...grpc.CallOption) (*ProhibitionRemoveResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.ProhibitionUserRemove(ctx, in, opts...)
}

func (m *defaultRoomRpc) ProhibitionList(ctx context.Context, in *ProhibitionListReq, opts ...grpc.CallOption) (*ProhibitionListResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.ProhibitionList(ctx, in, opts...)
}

func (m *defaultRoomRpc) Terminate(ctx context.Context, in *PartyTerminateReq, opts ...grpc.CallOption) (*PartyTerminateResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.Terminate(ctx, in, opts...)
}

func (m *defaultRoomRpc) ProhibitionUserInfo(ctx context.Context, in *ProhibitionGetReq, opts ...grpc.CallOption) (*ProhibitionGetResp, error) {
	client := pb.NewRoomRpcClient(m.cli.Conn())
	return client.ProhibitionUserInfo(ctx, in, opts...)
}
