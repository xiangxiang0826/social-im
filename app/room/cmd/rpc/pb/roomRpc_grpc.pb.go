// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: roomRpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomRpcClient is the client API for RoomRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomRpcClient interface {
	Create(ctx context.Context, in *PartyCreateReq, opts ...grpc.CallOption) (*PartyCreateResp, error)
	RoomLimitGet(ctx context.Context, in *RoomLimitReq, opts ...grpc.CallOption) (*RoomLimitResp, error)
	Join(ctx context.Context, in *PartyJoinReq, opts ...grpc.CallOption) (*PartyJoinResp, error)
	Leave(ctx context.Context, in *PartyLeaveReq, opts ...grpc.CallOption) (*PartyLeaveResp, error)
	Remove(ctx context.Context, in *PartyRemoveReq, opts ...grpc.CallOption) (*PartyRemoveResp, error)
	PartyList(ctx context.Context, in *PartyListReq, opts ...grpc.CallOption) (*PartyListResp, error)
	UserOnlineNumReport(ctx context.Context, in *UserNumReportReq, opts ...grpc.CallOption) (*UserNumReportResp, error)
	RoominfoById(ctx context.Context, in *RoominfoReq, opts ...grpc.CallOption) (*RoominfoResq, error)
	UpdatePartyName(ctx context.Context, in *PartyNameUpdateReq, opts ...grpc.CallOption) (*PartyNameUpdateResp, error)
	UpdatePartyBackgroundImg(ctx context.Context, in *PartyBackGroundImgUpdateReq, opts ...grpc.CallOption) (*PartyBackGroundImgUpdateResp, error)
	ProhibitionUserAdd(ctx context.Context, in *ProhibitionCreateReq, opts ...grpc.CallOption) (*ProhibitionCreateResp, error)
	ProhibitionUserRemove(ctx context.Context, in *ProhibitionRemoveReq, opts ...grpc.CallOption) (*ProhibitionRemoveResp, error)
	ProhibitionList(ctx context.Context, in *ProhibitionListReq, opts ...grpc.CallOption) (*ProhibitionListResp, error)
	Terminate(ctx context.Context, in *PartyTerminateReq, opts ...grpc.CallOption) (*PartyTerminateResp, error)
	ProhibitionUserInfo(ctx context.Context, in *ProhibitionGetReq, opts ...grpc.CallOption) (*ProhibitionGetResp, error)
}

type roomRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomRpcClient(cc grpc.ClientConnInterface) RoomRpcClient {
	return &roomRpcClient{cc}
}

func (c *roomRpcClient) Create(ctx context.Context, in *PartyCreateReq, opts ...grpc.CallOption) (*PartyCreateResp, error) {
	out := new(PartyCreateResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) RoomLimitGet(ctx context.Context, in *RoomLimitReq, opts ...grpc.CallOption) (*RoomLimitResp, error) {
	out := new(RoomLimitResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/roomLimitGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) Join(ctx context.Context, in *PartyJoinReq, opts ...grpc.CallOption) (*PartyJoinResp, error) {
	out := new(PartyJoinResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) Leave(ctx context.Context, in *PartyLeaveReq, opts ...grpc.CallOption) (*PartyLeaveResp, error) {
	out := new(PartyLeaveResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) Remove(ctx context.Context, in *PartyRemoveReq, opts ...grpc.CallOption) (*PartyRemoveResp, error) {
	out := new(PartyRemoveResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) PartyList(ctx context.Context, in *PartyListReq, opts ...grpc.CallOption) (*PartyListResp, error) {
	out := new(PartyListResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/partyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) UserOnlineNumReport(ctx context.Context, in *UserNumReportReq, opts ...grpc.CallOption) (*UserNumReportResp, error) {
	out := new(UserNumReportResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/userOnlineNumReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) RoominfoById(ctx context.Context, in *RoominfoReq, opts ...grpc.CallOption) (*RoominfoResq, error) {
	out := new(RoominfoResq)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/roominfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) UpdatePartyName(ctx context.Context, in *PartyNameUpdateReq, opts ...grpc.CallOption) (*PartyNameUpdateResp, error) {
	out := new(PartyNameUpdateResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/updatePartyName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) UpdatePartyBackgroundImg(ctx context.Context, in *PartyBackGroundImgUpdateReq, opts ...grpc.CallOption) (*PartyBackGroundImgUpdateResp, error) {
	out := new(PartyBackGroundImgUpdateResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/updatePartyBackgroundImg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) ProhibitionUserAdd(ctx context.Context, in *ProhibitionCreateReq, opts ...grpc.CallOption) (*ProhibitionCreateResp, error) {
	out := new(ProhibitionCreateResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/prohibitionUserAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) ProhibitionUserRemove(ctx context.Context, in *ProhibitionRemoveReq, opts ...grpc.CallOption) (*ProhibitionRemoveResp, error) {
	out := new(ProhibitionRemoveResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/prohibitionUserRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) ProhibitionList(ctx context.Context, in *ProhibitionListReq, opts ...grpc.CallOption) (*ProhibitionListResp, error) {
	out := new(ProhibitionListResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/prohibitionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) Terminate(ctx context.Context, in *PartyTerminateReq, opts ...grpc.CallOption) (*PartyTerminateResp, error) {
	out := new(PartyTerminateResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/terminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomRpcClient) ProhibitionUserInfo(ctx context.Context, in *ProhibitionGetReq, opts ...grpc.CallOption) (*ProhibitionGetResp, error) {
	out := new(ProhibitionGetResp)
	err := c.cc.Invoke(ctx, "/pb.roomRpc/prohibitionUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomRpcServer is the server API for RoomRpc service.
// All implementations must embed UnimplementedRoomRpcServer
// for forward compatibility
type RoomRpcServer interface {
	Create(context.Context, *PartyCreateReq) (*PartyCreateResp, error)
	RoomLimitGet(context.Context, *RoomLimitReq) (*RoomLimitResp, error)
	Join(context.Context, *PartyJoinReq) (*PartyJoinResp, error)
	Leave(context.Context, *PartyLeaveReq) (*PartyLeaveResp, error)
	Remove(context.Context, *PartyRemoveReq) (*PartyRemoveResp, error)
	PartyList(context.Context, *PartyListReq) (*PartyListResp, error)
	UserOnlineNumReport(context.Context, *UserNumReportReq) (*UserNumReportResp, error)
	RoominfoById(context.Context, *RoominfoReq) (*RoominfoResq, error)
	UpdatePartyName(context.Context, *PartyNameUpdateReq) (*PartyNameUpdateResp, error)
	UpdatePartyBackgroundImg(context.Context, *PartyBackGroundImgUpdateReq) (*PartyBackGroundImgUpdateResp, error)
	ProhibitionUserAdd(context.Context, *ProhibitionCreateReq) (*ProhibitionCreateResp, error)
	ProhibitionUserRemove(context.Context, *ProhibitionRemoveReq) (*ProhibitionRemoveResp, error)
	ProhibitionList(context.Context, *ProhibitionListReq) (*ProhibitionListResp, error)
	Terminate(context.Context, *PartyTerminateReq) (*PartyTerminateResp, error)
	ProhibitionUserInfo(context.Context, *ProhibitionGetReq) (*ProhibitionGetResp, error)
	mustEmbedUnimplementedRoomRpcServer()
}

// UnimplementedRoomRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRoomRpcServer struct {
}

func (UnimplementedRoomRpcServer) Create(context.Context, *PartyCreateReq) (*PartyCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoomRpcServer) RoomLimitGet(context.Context, *RoomLimitReq) (*RoomLimitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomLimitGet not implemented")
}
func (UnimplementedRoomRpcServer) Join(context.Context, *PartyJoinReq) (*PartyJoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedRoomRpcServer) Leave(context.Context, *PartyLeaveReq) (*PartyLeaveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedRoomRpcServer) Remove(context.Context, *PartyRemoveReq) (*PartyRemoveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedRoomRpcServer) PartyList(context.Context, *PartyListReq) (*PartyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartyList not implemented")
}
func (UnimplementedRoomRpcServer) UserOnlineNumReport(context.Context, *UserNumReportReq) (*UserNumReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOnlineNumReport not implemented")
}
func (UnimplementedRoomRpcServer) RoominfoById(context.Context, *RoominfoReq) (*RoominfoResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoominfoById not implemented")
}
func (UnimplementedRoomRpcServer) UpdatePartyName(context.Context, *PartyNameUpdateReq) (*PartyNameUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartyName not implemented")
}
func (UnimplementedRoomRpcServer) UpdatePartyBackgroundImg(context.Context, *PartyBackGroundImgUpdateReq) (*PartyBackGroundImgUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartyBackgroundImg not implemented")
}
func (UnimplementedRoomRpcServer) ProhibitionUserAdd(context.Context, *ProhibitionCreateReq) (*ProhibitionCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProhibitionUserAdd not implemented")
}
func (UnimplementedRoomRpcServer) ProhibitionUserRemove(context.Context, *ProhibitionRemoveReq) (*ProhibitionRemoveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProhibitionUserRemove not implemented")
}
func (UnimplementedRoomRpcServer) ProhibitionList(context.Context, *ProhibitionListReq) (*ProhibitionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProhibitionList not implemented")
}
func (UnimplementedRoomRpcServer) Terminate(context.Context, *PartyTerminateReq) (*PartyTerminateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedRoomRpcServer) ProhibitionUserInfo(context.Context, *ProhibitionGetReq) (*ProhibitionGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProhibitionUserInfo not implemented")
}
func (UnimplementedRoomRpcServer) mustEmbedUnimplementedRoomRpcServer() {}

// UnsafeRoomRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomRpcServer will
// result in compilation errors.
type UnsafeRoomRpcServer interface {
	mustEmbedUnimplementedRoomRpcServer()
}

func RegisterRoomRpcServer(s grpc.ServiceRegistrar, srv RoomRpcServer) {
	s.RegisterService(&RoomRpc_ServiceDesc, srv)
}

func _RoomRpc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).Create(ctx, req.(*PartyCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_RoomLimitGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).RoomLimitGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/roomLimitGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).RoomLimitGet(ctx, req.(*RoomLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).Join(ctx, req.(*PartyJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyLeaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).Leave(ctx, req.(*PartyLeaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).Remove(ctx, req.(*PartyRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_PartyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).PartyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/partyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).PartyList(ctx, req.(*PartyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_UserOnlineNumReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserNumReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).UserOnlineNumReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/userOnlineNumReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).UserOnlineNumReport(ctx, req.(*UserNumReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_RoominfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoominfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).RoominfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/roominfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).RoominfoById(ctx, req.(*RoominfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_UpdatePartyName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyNameUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).UpdatePartyName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/updatePartyName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).UpdatePartyName(ctx, req.(*PartyNameUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_UpdatePartyBackgroundImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyBackGroundImgUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).UpdatePartyBackgroundImg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/updatePartyBackgroundImg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).UpdatePartyBackgroundImg(ctx, req.(*PartyBackGroundImgUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_ProhibitionUserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProhibitionCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).ProhibitionUserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/prohibitionUserAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).ProhibitionUserAdd(ctx, req.(*ProhibitionCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_ProhibitionUserRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProhibitionRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).ProhibitionUserRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/prohibitionUserRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).ProhibitionUserRemove(ctx, req.(*ProhibitionRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_ProhibitionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProhibitionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).ProhibitionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/prohibitionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).ProhibitionList(ctx, req.(*ProhibitionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartyTerminateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/terminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).Terminate(ctx, req.(*PartyTerminateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomRpc_ProhibitionUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProhibitionGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomRpcServer).ProhibitionUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.roomRpc/prohibitionUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomRpcServer).ProhibitionUserInfo(ctx, req.(*ProhibitionGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomRpc_ServiceDesc is the grpc.ServiceDesc for RoomRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.roomRpc",
	HandlerType: (*RoomRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _RoomRpc_Create_Handler,
		},
		{
			MethodName: "roomLimitGet",
			Handler:    _RoomRpc_RoomLimitGet_Handler,
		},
		{
			MethodName: "join",
			Handler:    _RoomRpc_Join_Handler,
		},
		{
			MethodName: "leave",
			Handler:    _RoomRpc_Leave_Handler,
		},
		{
			MethodName: "remove",
			Handler:    _RoomRpc_Remove_Handler,
		},
		{
			MethodName: "partyList",
			Handler:    _RoomRpc_PartyList_Handler,
		},
		{
			MethodName: "userOnlineNumReport",
			Handler:    _RoomRpc_UserOnlineNumReport_Handler,
		},
		{
			MethodName: "roominfoById",
			Handler:    _RoomRpc_RoominfoById_Handler,
		},
		{
			MethodName: "updatePartyName",
			Handler:    _RoomRpc_UpdatePartyName_Handler,
		},
		{
			MethodName: "updatePartyBackgroundImg",
			Handler:    _RoomRpc_UpdatePartyBackgroundImg_Handler,
		},
		{
			MethodName: "prohibitionUserAdd",
			Handler:    _RoomRpc_ProhibitionUserAdd_Handler,
		},
		{
			MethodName: "prohibitionUserRemove",
			Handler:    _RoomRpc_ProhibitionUserRemove_Handler,
		},
		{
			MethodName: "prohibitionList",
			Handler:    _RoomRpc_ProhibitionList_Handler,
		},
		{
			MethodName: "terminate",
			Handler:    _RoomRpc_Terminate_Handler,
		},
		{
			MethodName: "prohibitionUserInfo",
			Handler:    _RoomRpc_ProhibitionUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "roomRpc.proto",
}
