// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheRoomAppRoomProhibitionUsersIdPrefix                = "cache:room:appRoomProhibitionUsers:id:"
	cacheRoomAppRoomProhibitionUsersRoomTypeRoomIdUidPrefix = "cache:room:appRoomProhibitionUsers:roomType:roomId:uid:"
)

type (
	appRoomProhibitionUsersModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *AppRoomProhibitionUsers) error

		FindOne(ctx context.Context, id int64) (*AppRoomProhibitionUsers, error)
		FindOneByRoomTypeRoomIdUid(ctx context.Context, roomType int64, roomId int64, uid int64) (*AppRoomProhibitionUsers, error)
		Update(ctx context.Context, tx *gorm.DB, data *AppRoomProhibitionUsers) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultAppRoomProhibitionUsersModel struct {
		gormc.CachedConn
		table string
	}

	AppRoomProhibitionUsers struct {
		Id           int64     `gorm:"column:id"`            // ID
		Uid          int64     `gorm:"column:uid"`           // 用户id
		RoomId       int64     `gorm:"column:room_id"`       // 房间id
		RoomType     int64     `gorm:"column:room_type"`     // 房间类型(1:派对,2:家族)
		Status       int64     `gorm:"column:status"`        // 是否禁言(0:正常,1:禁言)
		OperatorUser int64     `gorm:"column:operator_user"` // 操作人
		CreateTime   time.Time `gorm:"column:create_time"`   // 创建时间
		UpdateTime   time.Time `gorm:"column:update_time"`   // 更新时间
	}
)

func (AppRoomProhibitionUsers) TableName() string {
	return "`app_room_prohibition_users`"
}

func newAppRoomProhibitionUsersModel(conn *gorm.DB, c cache.CacheConf) *defaultAppRoomProhibitionUsersModel {
	return &defaultAppRoomProhibitionUsersModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`app_room_prohibition_users`",
	}
}

func (m *defaultAppRoomProhibitionUsersModel) Insert(ctx context.Context, tx *gorm.DB, data *AppRoomProhibitionUsers) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppRoomProhibitionUsersModel) FindOne(ctx context.Context, id int64) (*AppRoomProhibitionUsers, error) {
	roomAppRoomProhibitionUsersIdKey := fmt.Sprintf("%s%v", cacheRoomAppRoomProhibitionUsersIdPrefix, id)
	var resp AppRoomProhibitionUsers
	err := m.QueryCtx(ctx, &resp, roomAppRoomProhibitionUsersIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&AppRoomProhibitionUsers{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppRoomProhibitionUsersModel) FindOneByRoomTypeRoomIdUid(ctx context.Context, roomType int64, roomId int64, uid int64) (*AppRoomProhibitionUsers, error) {
	roomAppRoomProhibitionUsersRoomTypeRoomIdUidKey := fmt.Sprintf("%s%v:%v:%v", cacheRoomAppRoomProhibitionUsersRoomTypeRoomIdUidPrefix, roomType, roomId, uid)
	var resp AppRoomProhibitionUsers
	err := m.QueryRowIndexCtx(ctx, &resp, roomAppRoomProhibitionUsersRoomTypeRoomIdUidKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&AppRoomProhibitionUsers{}).Where("`room_type` = ? and `room_id` = ? and `uid` = ?", roomType, roomId, uid).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppRoomProhibitionUsersModel) Update(ctx context.Context, tx *gorm.DB, data *AppRoomProhibitionUsers) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultAppRoomProhibitionUsersModel) getCacheKeys(data *AppRoomProhibitionUsers) []string {
	if data == nil {
		return []string{}
	}
	roomAppRoomProhibitionUsersIdKey := fmt.Sprintf("%s%v", cacheRoomAppRoomProhibitionUsersIdPrefix, data.Id)
	roomAppRoomProhibitionUsersRoomTypeRoomIdUidKey := fmt.Sprintf("%s%v:%v:%v", cacheRoomAppRoomProhibitionUsersRoomTypeRoomIdUidPrefix, data.RoomType, data.RoomId, data.Uid)
	cacheKeys := []string{
		roomAppRoomProhibitionUsersIdKey, roomAppRoomProhibitionUsersRoomTypeRoomIdUidKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultAppRoomProhibitionUsersModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&AppRoomProhibitionUsers{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppRoomProhibitionUsersModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultAppRoomProhibitionUsersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRoomAppRoomProhibitionUsersIdPrefix, primary)
}

func (m *defaultAppRoomProhibitionUsersModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&AppRoomProhibitionUsers{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultAppRoomProhibitionUsersModel) tableName() string {
	return m.table
}
