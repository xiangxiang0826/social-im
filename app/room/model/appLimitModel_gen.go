// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGvaAppLimitIdPrefix                    = "cache:room:appLimit:id:"
	cacheGvaAppLimitUidCurDayNumLimitTypePrefix = "cache:room:appLimit:uid:curDayNum:limitType:"
)

type (
	appLimitModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *AppLimit) error

		FindOne(ctx context.Context, id int64) (*AppLimit, error)
		FindOneByUidCurDayNumLimitType(ctx context.Context, uid int64, curDayNum int64, limitType int64) (*AppLimit, error)
		Update(ctx context.Context, tx *gorm.DB, data *AppLimit) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultAppLimitModel struct {
		gormc.CachedConn
		table string
	}

	AppLimit struct {
		Id        int64 `gorm:"column:id"`          // ID
		CurDayNum int64 `gorm:"column:cur_day_num"` // 当前日期天数字
		Uid       int64 `gorm:"column:uid"`         // 用户id
		CurNums   int64 `gorm:"column:cur_nums"`    // 当前计数
		LimitType int64 `gorm:"column:limit_type"`  // 限制类型(1:派对,2:家族)
	}
)

func (AppLimit) TableName() string {
	return "`app_limit`"
}

func newAppLimitModel(conn *gorm.DB, c cache.CacheConf) *defaultAppLimitModel {
	return &defaultAppLimitModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`app_limit`",
	}
}

func (m *defaultAppLimitModel) Insert(ctx context.Context, tx *gorm.DB, data *AppLimit) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppLimitModel) FindOne(ctx context.Context, id int64) (*AppLimit, error) {
	gvaAppLimitIdKey := fmt.Sprintf("%s%v", cacheGvaAppLimitIdPrefix, id)
	var resp AppLimit
	err := m.QueryCtx(ctx, &resp, gvaAppLimitIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&AppLimit{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppLimitModel) FindOneByUidCurDayNumLimitType(ctx context.Context, uid int64, curDayNum int64, limitType int64) (*AppLimit, error) {
	gvaAppLimitUidCurDayNumLimitTypeKey := fmt.Sprintf("%s%v:%v:%v", cacheGvaAppLimitUidCurDayNumLimitTypePrefix, uid, curDayNum, limitType)
	var resp AppLimit
	err := m.QueryRowIndexCtx(ctx, &resp, gvaAppLimitUidCurDayNumLimitTypeKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&AppLimit{}).Where("`uid` = ? and `cur_day_num` = ? and `limit_type` = ?", uid, curDayNum, limitType).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppLimitModel) Update(ctx context.Context, tx *gorm.DB, data *AppLimit) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultAppLimitModel) getCacheKeys(data *AppLimit) []string {
	if data == nil {
		return []string{}
	}
	gvaAppLimitIdKey := fmt.Sprintf("%s%v", cacheGvaAppLimitIdPrefix, data.Id)
	gvaAppLimitUidCurDayNumLimitTypeKey := fmt.Sprintf("%s%v:%v:%v", cacheGvaAppLimitUidCurDayNumLimitTypePrefix, data.Uid, data.CurDayNum, data.LimitType)
	cacheKeys := []string{
		gvaAppLimitIdKey, gvaAppLimitUidCurDayNumLimitTypeKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultAppLimitModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&AppLimit{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppLimitModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultAppLimitModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGvaAppLimitIdPrefix, primary)
}

func (m *defaultAppLimitModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&AppLimit{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultAppLimitModel) tableName() string {
	return m.table
}
