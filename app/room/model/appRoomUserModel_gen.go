// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
	"social-im/common/rediskey"
	"time"
)

var (
	cacheRoomAppRoomUserIdPrefix = rediskey.CacheSocialImRoomUser
)

type (
	appRoomUserModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *AppRoomUser) error

		FindOne(ctx context.Context, id int64) (*AppRoomUser, error)
		Update(ctx context.Context, tx *gorm.DB, data *AppRoomUser) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultAppRoomUserModel struct {
		gormc.CachedConn
		table string
	}

	AppRoomUser struct {
		Id       int64     `gorm:"column:id"`
		PartyId  int64     `gorm:"column:party_id"`                                                    // 房间id
		UserId   int64     `gorm:"column:user_id"`                                                     // 用户id
		CreateAt time.Time `gorm:"column:create_at;type:timestamp;default:CURRENT_TIMESTAMP;not null"` // 创建时间
		LeaveAt  time.Time `gorm:"column:leave_at;type:timestamp;"`                                    // 离开时间
		CoolAt   time.Time `gorm:"column:cool_at;type:timestamp;"`                                     // 冷却时间
	}
)

func (AppRoomUser) TableName() string {
	return "`app_room_user`"
}

func newAppRoomUserModel(conn *gorm.DB, c cache.CacheConf) *defaultAppRoomUserModel {
	return &defaultAppRoomUserModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`app_room_user`",
	}
}

func (m *defaultAppRoomUserModel) Insert(ctx context.Context, tx *gorm.DB, data *AppRoomUser) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppRoomUserModel) FindOne(ctx context.Context, id int64) (*AppRoomUser, error) {
	roomAppRoomUserIdKey := fmt.Sprintf("%s%v", cacheRoomAppRoomUserIdPrefix, id)
	var resp AppRoomUser
	err := m.QueryCtx(ctx, &resp, roomAppRoomUserIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&AppRoomUser{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppRoomUserModel) Update(ctx context.Context, tx *gorm.DB, data *AppRoomUser) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultAppRoomUserModel) getCacheKeys(data *AppRoomUser) []string {
	if data == nil {
		return []string{}
	}
	roomAppRoomUserIdKey := fmt.Sprintf("%s%v-%v", cacheRoomAppRoomUserIdPrefix, data.PartyId, data.UserId)
	cacheKeys := []string{
		roomAppRoomUserIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultAppRoomUserModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&AppRoomUser{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppRoomUserModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultAppRoomUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRoomAppRoomUserIdPrefix, primary)
}

func (m *defaultAppRoomUserModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&AppRoomUser{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultAppRoomUserModel) tableName() string {
	return m.table
}
