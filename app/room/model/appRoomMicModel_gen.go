// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGvaAppRoomMicIdPrefix   = "cache:room:appRoomMic:id:"
	cacheGvaAppRoomMicMarkPrefix = "cache:room:appRoomMic:mark:"
)

type (
	appRoomMicModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *AppRoomMic) error

		FindOne(ctx context.Context, id int64) (*AppRoomMic, error)
		FindOneByMark(ctx context.Context, mark string) (*AppRoomMic, error)
		Update(ctx context.Context, tx *gorm.DB, data *AppRoomMic) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultAppRoomMicModel struct {
		gormc.CachedConn
		table string
	}

	AppRoomMic struct {
		Id                 int64     `gorm:"column:id"`                   // ID
		Mark               string    `gorm:"column:mark"`                 // 房间唯一标识
		Name               string    `gorm:"column:name"`                 // 房间名称
		BackgroundUrl      string    `gorm:"column:background_url"`       // 房间背景图片
		BackgroundSmallUrl string    `gorm:"column:background_small_url"` // 房间背景小图图片
		PartyType          int64     `gorm:"column:party_type"`           // 派对类型
		CreateUser         int64     `gorm:"column:create_user"`          // 房间创建人
		OnlineNums         int64     `gorm:"column:online_nums"`          // 在线用户数
		Status             int64     `gorm:"column:status"`               // 状态(0:正常,1:关闭)
		UV                 int64     `gorm:"column:uv"`                   // 在线用户数
		CreatedAt          time.Time `gorm:"column:created_at"`           // 创建时间
		UpdatedAt          time.Time `gorm:"column:updated_at"`           // 更新时间
		TerminateAt        time.Time `gorm:"column:terminate_at"`         // 更新时间
	}
)

func (AppRoomMic) TableName() string {
	return "`app_room_mic`"
}

func newAppRoomMicModel(conn *gorm.DB, c cache.CacheConf) *defaultAppRoomMicModel {
	return &defaultAppRoomMicModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`app_room_mic`",
	}
}

func (m *defaultAppRoomMicModel) Insert(ctx context.Context, tx *gorm.DB, data *AppRoomMic) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppRoomMicModel) FindOne(ctx context.Context, id int64) (*AppRoomMic, error) {
	gvaAppRoomMicIdKey := fmt.Sprintf("%s%v", cacheGvaAppRoomMicIdPrefix, id)
	var resp AppRoomMic
	err := m.QueryCtx(ctx, &resp, gvaAppRoomMicIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&AppRoomMic{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppRoomMicModel) FindOneByMark(ctx context.Context, mark string) (*AppRoomMic, error) {
	gvaAppRoomMicMarkKey := fmt.Sprintf("%s%v", cacheGvaAppRoomMicMarkPrefix, mark)
	var resp AppRoomMic
	err := m.QueryRowIndexCtx(ctx, &resp, gvaAppRoomMicMarkKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&AppRoomMic{}).Where("`mark` = ?", mark).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppRoomMicModel) Update(ctx context.Context, tx *gorm.DB, data *AppRoomMic) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultAppRoomMicModel) getCacheKeys(data *AppRoomMic) []string {
	if data == nil {
		return []string{}
	}
	gvaAppRoomMicIdKey := fmt.Sprintf("%s%v", cacheGvaAppRoomMicIdPrefix, data.Id)
	gvaAppRoomMicMarkKey := fmt.Sprintf("%s%v", cacheGvaAppRoomMicMarkPrefix, data.Mark)
	cacheKeys := []string{
		gvaAppRoomMicIdKey, gvaAppRoomMicMarkKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultAppRoomMicModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&AppRoomMic{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppRoomMicModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultAppRoomMicModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGvaAppRoomMicIdPrefix, primary)
}

func (m *defaultAppRoomMicModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&AppRoomMic{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultAppRoomMicModel) tableName() string {
	return m.table
}
