// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: app/user/cmd/rpc/pb/userRpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRpcClient is the client API for UserRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRpcClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
	Sms(ctx context.Context, in *SmsReq, opts ...grpc.CallOption) (*SmsResp, error)
	SmsCode(ctx context.Context, in *SmsCodeReq, opts ...grpc.CallOption) (*SmsCodeResp, error)
	SmsReg(ctx context.Context, in *SmsRegReq, opts ...grpc.CallOption) (*SmsRegResp, error)
	Identity(ctx context.Context, in *IdentityReq, opts ...grpc.CallOption) (*IdentityResp, error)
	SmsLogin(ctx context.Context, in *SmsLoginReq, opts ...grpc.CallOption) (*SmsLoginResp, error)
	AutoReg(ctx context.Context, in *AutoRegReq, opts ...grpc.CallOption) (*AutoRegResp, error)
	CheckUserId(ctx context.Context, in *CheckUserIdReq, opts ...grpc.CallOption) (*CheckUserIdResp, error)
	SmsVerify(ctx context.Context, in *SmsVerifyReq, opts ...grpc.CallOption) (*SmsVerifyResp, error)
	UpdatePwd(ctx context.Context, in *UpdatePwdReq, opts ...grpc.CallOption) (*UpdatePwdResp, error)
	UpdateInfo(ctx context.Context, in *UpdateInfoReq, opts ...grpc.CallOption) (*UpdateInfoResp, error)
	GetRtmToken(ctx context.Context, in *GetRtmTokenReq, opts ...grpc.CallOption) (*GetRtmTokenResp, error)
	GetRtcToken(ctx context.Context, in *GetRtcTokenReq, opts ...grpc.CallOption) (*GetRtcTokenResp, error)
	GetAccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...grpc.CallOption) (*GetAccessTokenResp, error)
	SendRtm(ctx context.Context, in *SendRtmReq, opts ...grpc.CallOption) (*SendRtmResp, error)
	SendRtmChannel(ctx context.Context, in *SendRtmChannelReq, opts ...grpc.CallOption) (*SendRtmChannelResp, error)
	ApplyMic(ctx context.Context, in *ApplyMicReq, opts ...grpc.CallOption) (*ApplyMicResq, error)
	ApproveMic(ctx context.Context, in *ApproveMicReq, opts ...grpc.CallOption) (*ApproveMicResp, error)
	RejectMic(ctx context.Context, in *RejectMicReq, opts ...grpc.CallOption) (*RejectMicResp, error)
	ApplyingMicList(ctx context.Context, in *ApplyingMicListReq, opts ...grpc.CallOption) (*ApplyingMicListResp, error)
	OnMicersList(ctx context.Context, in *OnMicersListReq, opts ...grpc.CallOption) (*OnMicersListResp, error)
	InviteMic(ctx context.Context, in *InviteMicReq, opts ...grpc.CallOption) (*InviteMicResp, error)
	AcceptMic(ctx context.Context, in *AcceptMicReq, opts ...grpc.CallOption) (*AcceptMicResq, error)
	DeclineMic(ctx context.Context, in *DeclineMicReq, opts ...grpc.CallOption) (*DeclineMicResq, error)
	RemoveMic(ctx context.Context, in *RemoveMicReq, opts ...grpc.CallOption) (*RemoveMicResp, error)
	StopMic(ctx context.Context, in *StopMicReq, opts ...grpc.CallOption) (*StopMicResp, error)
	ResumeMic(ctx context.Context, in *ResumeMicReq, opts ...grpc.CallOption) (*ResumeMicResq, error)
	InviteAdmin(ctx context.Context, in *InviteAdminReq, opts ...grpc.CallOption) (*InviteAdminResq, error)
	AcceptAdmin(ctx context.Context, in *AcceptAdminReq, opts ...grpc.CallOption) (*AcceptAdminResq, error)
	DeclineAdmin(ctx context.Context, in *DeclineAdminReq, opts ...grpc.CallOption) (*DeclineAdminResq, error)
	RemoveAdmin(ctx context.Context, in *RemoveAdminReq, opts ...grpc.CallOption) (*RemoveAdminResp, error)
	RoomAdminList(ctx context.Context, in *RoomAdminListReq, opts ...grpc.CallOption) (*RoomAdminListResp, error)
	RemoveUserRoomStatus(ctx context.Context, in *RemoveUserRoomStatusReq, opts ...grpc.CallOption) (*RemoveUserRoomStatusResq, error)
	UpdateBaseInfo(ctx context.Context, in *UpdateBaseReq, opts ...grpc.CallOption) (*UpdateBaseResp, error)
	UpdateAboutMe(ctx context.Context, in *UpdateAboutMeReq, opts ...grpc.CallOption) (*UpdateAboutMeResp, error)
	UpdateBackgroundImage(ctx context.Context, in *UpdateBackgroundImageReq, opts ...grpc.CallOption) (*UpdateBackgroundImageResp, error)
	GetUserBaseInfo(ctx context.Context, in *GetUserBaseReq, opts ...grpc.CallOption) (*GetUserBaseResp, error)
	SelectTag(ctx context.Context, in *SelectTagReq, opts ...grpc.CallOption) (*SelectTagResp, error)
	UserFollow(ctx context.Context, in *RoomUsers, opts ...grpc.CallOption) (*CommonRespNew, error)
	UserUnFollow(ctx context.Context, in *RoomUsers, opts ...grpc.CallOption) (*CommonRespNew, error)
	UserFollowers(ctx context.Context, in *RoomUser, opts ...grpc.CallOption) (*Users, error)
	UserFollows(ctx context.Context, in *RoomUser, opts ...grpc.CallOption) (*Users, error)
}

type userRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRpcClient(cc grpc.ClientConnInterface) UserRpcClient {
	return &userRpcClient{cc}
}

func (c *userRpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/getUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	out := new(GenerateTokenResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/generateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) Sms(ctx context.Context, in *SmsReq, opts ...grpc.CallOption) (*SmsResp, error) {
	out := new(SmsResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/sms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SmsCode(ctx context.Context, in *SmsCodeReq, opts ...grpc.CallOption) (*SmsCodeResp, error) {
	out := new(SmsCodeResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/SmsCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SmsReg(ctx context.Context, in *SmsRegReq, opts ...grpc.CallOption) (*SmsRegResp, error) {
	out := new(SmsRegResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/smsReg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) Identity(ctx context.Context, in *IdentityReq, opts ...grpc.CallOption) (*IdentityResp, error) {
	out := new(IdentityResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/identity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SmsLogin(ctx context.Context, in *SmsLoginReq, opts ...grpc.CallOption) (*SmsLoginResp, error) {
	out := new(SmsLoginResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/smsLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) AutoReg(ctx context.Context, in *AutoRegReq, opts ...grpc.CallOption) (*AutoRegResp, error) {
	out := new(AutoRegResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/autoReg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) CheckUserId(ctx context.Context, in *CheckUserIdReq, opts ...grpc.CallOption) (*CheckUserIdResp, error) {
	out := new(CheckUserIdResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/checkUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SmsVerify(ctx context.Context, in *SmsVerifyReq, opts ...grpc.CallOption) (*SmsVerifyResp, error) {
	out := new(SmsVerifyResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/smsVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdatePwd(ctx context.Context, in *UpdatePwdReq, opts ...grpc.CallOption) (*UpdatePwdResp, error) {
	out := new(UpdatePwdResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/updatePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateInfo(ctx context.Context, in *UpdateInfoReq, opts ...grpc.CallOption) (*UpdateInfoResp, error) {
	out := new(UpdateInfoResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/updateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetRtmToken(ctx context.Context, in *GetRtmTokenReq, opts ...grpc.CallOption) (*GetRtmTokenResp, error) {
	out := new(GetRtmTokenResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/getRtmToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetRtcToken(ctx context.Context, in *GetRtcTokenReq, opts ...grpc.CallOption) (*GetRtcTokenResp, error) {
	out := new(GetRtcTokenResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/getRtcToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetAccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...grpc.CallOption) (*GetAccessTokenResp, error) {
	out := new(GetAccessTokenResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/getAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SendRtm(ctx context.Context, in *SendRtmReq, opts ...grpc.CallOption) (*SendRtmResp, error) {
	out := new(SendRtmResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/SendRtm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SendRtmChannel(ctx context.Context, in *SendRtmChannelReq, opts ...grpc.CallOption) (*SendRtmChannelResp, error) {
	out := new(SendRtmChannelResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/SendRtmChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ApplyMic(ctx context.Context, in *ApplyMicReq, opts ...grpc.CallOption) (*ApplyMicResq, error) {
	out := new(ApplyMicResq)
	err := c.cc.Invoke(ctx, "/pb.userRpc/applyMic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ApproveMic(ctx context.Context, in *ApproveMicReq, opts ...grpc.CallOption) (*ApproveMicResp, error) {
	out := new(ApproveMicResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/approveMic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) RejectMic(ctx context.Context, in *RejectMicReq, opts ...grpc.CallOption) (*RejectMicResp, error) {
	out := new(RejectMicResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/rejectMic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ApplyingMicList(ctx context.Context, in *ApplyingMicListReq, opts ...grpc.CallOption) (*ApplyingMicListResp, error) {
	out := new(ApplyingMicListResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/applyingMicList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) OnMicersList(ctx context.Context, in *OnMicersListReq, opts ...grpc.CallOption) (*OnMicersListResp, error) {
	out := new(OnMicersListResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/OnMicersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) InviteMic(ctx context.Context, in *InviteMicReq, opts ...grpc.CallOption) (*InviteMicResp, error) {
	out := new(InviteMicResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/inviteMic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) AcceptMic(ctx context.Context, in *AcceptMicReq, opts ...grpc.CallOption) (*AcceptMicResq, error) {
	out := new(AcceptMicResq)
	err := c.cc.Invoke(ctx, "/pb.userRpc/AcceptMic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) DeclineMic(ctx context.Context, in *DeclineMicReq, opts ...grpc.CallOption) (*DeclineMicResq, error) {
	out := new(DeclineMicResq)
	err := c.cc.Invoke(ctx, "/pb.userRpc/declineMic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) RemoveMic(ctx context.Context, in *RemoveMicReq, opts ...grpc.CallOption) (*RemoveMicResp, error) {
	out := new(RemoveMicResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/removeMic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) StopMic(ctx context.Context, in *StopMicReq, opts ...grpc.CallOption) (*StopMicResp, error) {
	out := new(StopMicResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/stopMic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) ResumeMic(ctx context.Context, in *ResumeMicReq, opts ...grpc.CallOption) (*ResumeMicResq, error) {
	out := new(ResumeMicResq)
	err := c.cc.Invoke(ctx, "/pb.userRpc/resumeMic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) InviteAdmin(ctx context.Context, in *InviteAdminReq, opts ...grpc.CallOption) (*InviteAdminResq, error) {
	out := new(InviteAdminResq)
	err := c.cc.Invoke(ctx, "/pb.userRpc/inviteAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) AcceptAdmin(ctx context.Context, in *AcceptAdminReq, opts ...grpc.CallOption) (*AcceptAdminResq, error) {
	out := new(AcceptAdminResq)
	err := c.cc.Invoke(ctx, "/pb.userRpc/acceptAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) DeclineAdmin(ctx context.Context, in *DeclineAdminReq, opts ...grpc.CallOption) (*DeclineAdminResq, error) {
	out := new(DeclineAdminResq)
	err := c.cc.Invoke(ctx, "/pb.userRpc/declineAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) RemoveAdmin(ctx context.Context, in *RemoveAdminReq, opts ...grpc.CallOption) (*RemoveAdminResp, error) {
	out := new(RemoveAdminResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/removeAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) RoomAdminList(ctx context.Context, in *RoomAdminListReq, opts ...grpc.CallOption) (*RoomAdminListResp, error) {
	out := new(RoomAdminListResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/roomAdminList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) RemoveUserRoomStatus(ctx context.Context, in *RemoveUserRoomStatusReq, opts ...grpc.CallOption) (*RemoveUserRoomStatusResq, error) {
	out := new(RemoveUserRoomStatusResq)
	err := c.cc.Invoke(ctx, "/pb.userRpc/removeUserRoomStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateBaseInfo(ctx context.Context, in *UpdateBaseReq, opts ...grpc.CallOption) (*UpdateBaseResp, error) {
	out := new(UpdateBaseResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/updateBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateAboutMe(ctx context.Context, in *UpdateAboutMeReq, opts ...grpc.CallOption) (*UpdateAboutMeResp, error) {
	out := new(UpdateAboutMeResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/updateAboutMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateBackgroundImage(ctx context.Context, in *UpdateBackgroundImageReq, opts ...grpc.CallOption) (*UpdateBackgroundImageResp, error) {
	out := new(UpdateBackgroundImageResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/updateBackgroundImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetUserBaseInfo(ctx context.Context, in *GetUserBaseReq, opts ...grpc.CallOption) (*GetUserBaseResp, error) {
	out := new(GetUserBaseResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/getUserBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) SelectTag(ctx context.Context, in *SelectTagReq, opts ...grpc.CallOption) (*SelectTagResp, error) {
	out := new(SelectTagResp)
	err := c.cc.Invoke(ctx, "/pb.userRpc/selectTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserFollow(ctx context.Context, in *RoomUsers, opts ...grpc.CallOption) (*CommonRespNew, error) {
	out := new(CommonRespNew)
	err := c.cc.Invoke(ctx, "/pb.userRpc/userFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserUnFollow(ctx context.Context, in *RoomUsers, opts ...grpc.CallOption) (*CommonRespNew, error) {
	out := new(CommonRespNew)
	err := c.cc.Invoke(ctx, "/pb.userRpc/userUnFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserFollowers(ctx context.Context, in *RoomUser, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/pb.userRpc/userFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UserFollows(ctx context.Context, in *RoomUser, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/pb.userRpc/userFollows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRpcServer is the server API for UserRpc service.
// All implementations must embed UnimplementedUserRpcServer
// for forward compatibility
type UserRpcServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error)
	Sms(context.Context, *SmsReq) (*SmsResp, error)
	SmsCode(context.Context, *SmsCodeReq) (*SmsCodeResp, error)
	SmsReg(context.Context, *SmsRegReq) (*SmsRegResp, error)
	Identity(context.Context, *IdentityReq) (*IdentityResp, error)
	SmsLogin(context.Context, *SmsLoginReq) (*SmsLoginResp, error)
	AutoReg(context.Context, *AutoRegReq) (*AutoRegResp, error)
	CheckUserId(context.Context, *CheckUserIdReq) (*CheckUserIdResp, error)
	SmsVerify(context.Context, *SmsVerifyReq) (*SmsVerifyResp, error)
	UpdatePwd(context.Context, *UpdatePwdReq) (*UpdatePwdResp, error)
	UpdateInfo(context.Context, *UpdateInfoReq) (*UpdateInfoResp, error)
	GetRtmToken(context.Context, *GetRtmTokenReq) (*GetRtmTokenResp, error)
	GetRtcToken(context.Context, *GetRtcTokenReq) (*GetRtcTokenResp, error)
	GetAccessToken(context.Context, *GetAccessTokenReq) (*GetAccessTokenResp, error)
	SendRtm(context.Context, *SendRtmReq) (*SendRtmResp, error)
	SendRtmChannel(context.Context, *SendRtmChannelReq) (*SendRtmChannelResp, error)
	ApplyMic(context.Context, *ApplyMicReq) (*ApplyMicResq, error)
	ApproveMic(context.Context, *ApproveMicReq) (*ApproveMicResp, error)
	RejectMic(context.Context, *RejectMicReq) (*RejectMicResp, error)
	ApplyingMicList(context.Context, *ApplyingMicListReq) (*ApplyingMicListResp, error)
	OnMicersList(context.Context, *OnMicersListReq) (*OnMicersListResp, error)
	InviteMic(context.Context, *InviteMicReq) (*InviteMicResp, error)
	AcceptMic(context.Context, *AcceptMicReq) (*AcceptMicResq, error)
	DeclineMic(context.Context, *DeclineMicReq) (*DeclineMicResq, error)
	RemoveMic(context.Context, *RemoveMicReq) (*RemoveMicResp, error)
	StopMic(context.Context, *StopMicReq) (*StopMicResp, error)
	ResumeMic(context.Context, *ResumeMicReq) (*ResumeMicResq, error)
	InviteAdmin(context.Context, *InviteAdminReq) (*InviteAdminResq, error)
	AcceptAdmin(context.Context, *AcceptAdminReq) (*AcceptAdminResq, error)
	DeclineAdmin(context.Context, *DeclineAdminReq) (*DeclineAdminResq, error)
	RemoveAdmin(context.Context, *RemoveAdminReq) (*RemoveAdminResp, error)
	RoomAdminList(context.Context, *RoomAdminListReq) (*RoomAdminListResp, error)
	RemoveUserRoomStatus(context.Context, *RemoveUserRoomStatusReq) (*RemoveUserRoomStatusResq, error)
	UpdateBaseInfo(context.Context, *UpdateBaseReq) (*UpdateBaseResp, error)
	UpdateAboutMe(context.Context, *UpdateAboutMeReq) (*UpdateAboutMeResp, error)
	UpdateBackgroundImage(context.Context, *UpdateBackgroundImageReq) (*UpdateBackgroundImageResp, error)
	GetUserBaseInfo(context.Context, *GetUserBaseReq) (*GetUserBaseResp, error)
	SelectTag(context.Context, *SelectTagReq) (*SelectTagResp, error)
	UserFollow(context.Context, *RoomUsers) (*CommonRespNew, error)
	UserUnFollow(context.Context, *RoomUsers) (*CommonRespNew, error)
	UserFollowers(context.Context, *RoomUser) (*Users, error)
	UserFollows(context.Context, *RoomUser) (*Users, error)
	mustEmbedUnimplementedUserRpcServer()
}

// UnimplementedUserRpcServer must be embedded to have forward compatible implementations.
type UnimplementedUserRpcServer struct {
}

func (UnimplementedUserRpcServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserRpcServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserRpcServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserRpcServer) GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedUserRpcServer) Sms(context.Context, *SmsReq) (*SmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sms not implemented")
}
func (UnimplementedUserRpcServer) SmsCode(context.Context, *SmsCodeReq) (*SmsCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsCode not implemented")
}
func (UnimplementedUserRpcServer) SmsReg(context.Context, *SmsRegReq) (*SmsRegResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsReg not implemented")
}
func (UnimplementedUserRpcServer) Identity(context.Context, *IdentityReq) (*IdentityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Identity not implemented")
}
func (UnimplementedUserRpcServer) SmsLogin(context.Context, *SmsLoginReq) (*SmsLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsLogin not implemented")
}
func (UnimplementedUserRpcServer) AutoReg(context.Context, *AutoRegReq) (*AutoRegResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoReg not implemented")
}
func (UnimplementedUserRpcServer) CheckUserId(context.Context, *CheckUserIdReq) (*CheckUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserId not implemented")
}
func (UnimplementedUserRpcServer) SmsVerify(context.Context, *SmsVerifyReq) (*SmsVerifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsVerify not implemented")
}
func (UnimplementedUserRpcServer) UpdatePwd(context.Context, *UpdatePwdReq) (*UpdatePwdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePwd not implemented")
}
func (UnimplementedUserRpcServer) UpdateInfo(context.Context, *UpdateInfoReq) (*UpdateInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfo not implemented")
}
func (UnimplementedUserRpcServer) GetRtmToken(context.Context, *GetRtmTokenReq) (*GetRtmTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRtmToken not implemented")
}
func (UnimplementedUserRpcServer) GetRtcToken(context.Context, *GetRtcTokenReq) (*GetRtcTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRtcToken not implemented")
}
func (UnimplementedUserRpcServer) GetAccessToken(context.Context, *GetAccessTokenReq) (*GetAccessTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedUserRpcServer) SendRtm(context.Context, *SendRtmReq) (*SendRtmResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRtm not implemented")
}
func (UnimplementedUserRpcServer) SendRtmChannel(context.Context, *SendRtmChannelReq) (*SendRtmChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRtmChannel not implemented")
}
func (UnimplementedUserRpcServer) ApplyMic(context.Context, *ApplyMicReq) (*ApplyMicResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyMic not implemented")
}
func (UnimplementedUserRpcServer) ApproveMic(context.Context, *ApproveMicReq) (*ApproveMicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveMic not implemented")
}
func (UnimplementedUserRpcServer) RejectMic(context.Context, *RejectMicReq) (*RejectMicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectMic not implemented")
}
func (UnimplementedUserRpcServer) ApplyingMicList(context.Context, *ApplyingMicListReq) (*ApplyingMicListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyingMicList not implemented")
}
func (UnimplementedUserRpcServer) OnMicersList(context.Context, *OnMicersListReq) (*OnMicersListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMicersList not implemented")
}
func (UnimplementedUserRpcServer) InviteMic(context.Context, *InviteMicReq) (*InviteMicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMic not implemented")
}
func (UnimplementedUserRpcServer) AcceptMic(context.Context, *AcceptMicReq) (*AcceptMicResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptMic not implemented")
}
func (UnimplementedUserRpcServer) DeclineMic(context.Context, *DeclineMicReq) (*DeclineMicResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineMic not implemented")
}
func (UnimplementedUserRpcServer) RemoveMic(context.Context, *RemoveMicReq) (*RemoveMicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMic not implemented")
}
func (UnimplementedUserRpcServer) StopMic(context.Context, *StopMicReq) (*StopMicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMic not implemented")
}
func (UnimplementedUserRpcServer) ResumeMic(context.Context, *ResumeMicReq) (*ResumeMicResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeMic not implemented")
}
func (UnimplementedUserRpcServer) InviteAdmin(context.Context, *InviteAdminReq) (*InviteAdminResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteAdmin not implemented")
}
func (UnimplementedUserRpcServer) AcceptAdmin(context.Context, *AcceptAdminReq) (*AcceptAdminResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptAdmin not implemented")
}
func (UnimplementedUserRpcServer) DeclineAdmin(context.Context, *DeclineAdminReq) (*DeclineAdminResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineAdmin not implemented")
}
func (UnimplementedUserRpcServer) RemoveAdmin(context.Context, *RemoveAdminReq) (*RemoveAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdmin not implemented")
}
func (UnimplementedUserRpcServer) RoomAdminList(context.Context, *RoomAdminListReq) (*RoomAdminListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAdminList not implemented")
}
func (UnimplementedUserRpcServer) RemoveUserRoomStatus(context.Context, *RemoveUserRoomStatusReq) (*RemoveUserRoomStatusResq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserRoomStatus not implemented")
}
func (UnimplementedUserRpcServer) UpdateBaseInfo(context.Context, *UpdateBaseReq) (*UpdateBaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBaseInfo not implemented")
}
func (UnimplementedUserRpcServer) UpdateAboutMe(context.Context, *UpdateAboutMeReq) (*UpdateAboutMeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAboutMe not implemented")
}
func (UnimplementedUserRpcServer) UpdateBackgroundImage(context.Context, *UpdateBackgroundImageReq) (*UpdateBackgroundImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackgroundImage not implemented")
}
func (UnimplementedUserRpcServer) GetUserBaseInfo(context.Context, *GetUserBaseReq) (*GetUserBaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBaseInfo not implemented")
}
func (UnimplementedUserRpcServer) SelectTag(context.Context, *SelectTagReq) (*SelectTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTag not implemented")
}
func (UnimplementedUserRpcServer) UserFollow(context.Context, *RoomUsers) (*CommonRespNew, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFollow not implemented")
}
func (UnimplementedUserRpcServer) UserUnFollow(context.Context, *RoomUsers) (*CommonRespNew, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUnFollow not implemented")
}
func (UnimplementedUserRpcServer) UserFollowers(context.Context, *RoomUser) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFollowers not implemented")
}
func (UnimplementedUserRpcServer) UserFollows(context.Context, *RoomUser) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFollows not implemented")
}
func (UnimplementedUserRpcServer) mustEmbedUnimplementedUserRpcServer() {}

// UnsafeUserRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRpcServer will
// result in compilation errors.
type UnsafeUserRpcServer interface {
	mustEmbedUnimplementedUserRpcServer()
}

func RegisterUserRpcServer(s grpc.ServiceRegistrar, srv UserRpcServer) {
	s.RegisterService(&UserRpc_ServiceDesc, srv)
}

func _UserRpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/getUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/generateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GenerateToken(ctx, req.(*GenerateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_Sms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).Sms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/sms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).Sms(ctx, req.(*SmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SmsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SmsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/SmsCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SmsCode(ctx, req.(*SmsCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SmsReg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsRegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SmsReg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/smsReg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SmsReg(ctx, req.(*SmsRegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_Identity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).Identity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/identity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).Identity(ctx, req.(*IdentityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SmsLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SmsLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/smsLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SmsLogin(ctx, req.(*SmsLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_AutoReg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoRegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).AutoReg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/autoReg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).AutoReg(ctx, req.(*AutoRegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_CheckUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).CheckUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/checkUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).CheckUserId(ctx, req.(*CheckUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SmsVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsVerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SmsVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/smsVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SmsVerify(ctx, req.(*SmsVerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdatePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdatePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/updatePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdatePwd(ctx, req.(*UpdatePwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/updateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateInfo(ctx, req.(*UpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetRtmToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRtmTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetRtmToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/getRtmToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetRtmToken(ctx, req.(*GetRtmTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetRtcToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRtcTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetRtcToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/getRtcToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetRtcToken(ctx, req.(*GetRtcTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/getAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetAccessToken(ctx, req.(*GetAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SendRtm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRtmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SendRtm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/SendRtm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SendRtm(ctx, req.(*SendRtmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SendRtmChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRtmChannelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SendRtmChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/SendRtmChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SendRtmChannel(ctx, req.(*SendRtmChannelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ApplyMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ApplyMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/applyMic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ApplyMic(ctx, req.(*ApplyMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ApproveMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ApproveMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/approveMic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ApproveMic(ctx, req.(*ApproveMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_RejectMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).RejectMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/rejectMic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).RejectMic(ctx, req.(*RejectMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ApplyingMicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyingMicListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ApplyingMicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/applyingMicList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ApplyingMicList(ctx, req.(*ApplyingMicListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_OnMicersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnMicersListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).OnMicersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/OnMicersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).OnMicersList(ctx, req.(*OnMicersListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_InviteMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).InviteMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/inviteMic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).InviteMic(ctx, req.(*InviteMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_AcceptMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).AcceptMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/AcceptMic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).AcceptMic(ctx, req.(*AcceptMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_DeclineMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).DeclineMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/declineMic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).DeclineMic(ctx, req.(*DeclineMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_RemoveMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).RemoveMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/removeMic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).RemoveMic(ctx, req.(*RemoveMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_StopMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).StopMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/stopMic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).StopMic(ctx, req.(*StopMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_ResumeMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).ResumeMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/resumeMic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).ResumeMic(ctx, req.(*ResumeMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_InviteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).InviteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/inviteAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).InviteAdmin(ctx, req.(*InviteAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_AcceptAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).AcceptAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/acceptAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).AcceptAdmin(ctx, req.(*AcceptAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_DeclineAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).DeclineAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/declineAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).DeclineAdmin(ctx, req.(*DeclineAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_RemoveAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).RemoveAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/removeAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).RemoveAdmin(ctx, req.(*RemoveAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_RoomAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAdminListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).RoomAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/roomAdminList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).RoomAdminList(ctx, req.(*RoomAdminListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_RemoveUserRoomStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRoomStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).RemoveUserRoomStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/removeUserRoomStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).RemoveUserRoomStatus(ctx, req.(*RemoveUserRoomStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/updateBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateBaseInfo(ctx, req.(*UpdateBaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateAboutMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAboutMeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateAboutMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/updateAboutMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateAboutMe(ctx, req.(*UpdateAboutMeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateBackgroundImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackgroundImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateBackgroundImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/updateBackgroundImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateBackgroundImage(ctx, req.(*UpdateBackgroundImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetUserBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetUserBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/getUserBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetUserBaseInfo(ctx, req.(*GetUserBaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_SelectTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).SelectTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/selectTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).SelectTag(ctx, req.(*SelectTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/userFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserFollow(ctx, req.(*RoomUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserUnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserUnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/userUnFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserUnFollow(ctx, req.(*RoomUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/userFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserFollowers(ctx, req.(*RoomUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UserFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UserFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userRpc/userFollows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UserFollows(ctx, req.(*RoomUser))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRpc_ServiceDesc is the grpc.ServiceDesc for UserRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.userRpc",
	HandlerType: (*UserRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _UserRpc_Login_Handler,
		},
		{
			MethodName: "register",
			Handler:    _UserRpc_Register_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _UserRpc_GetUserInfo_Handler,
		},
		{
			MethodName: "generateToken",
			Handler:    _UserRpc_GenerateToken_Handler,
		},
		{
			MethodName: "sms",
			Handler:    _UserRpc_Sms_Handler,
		},
		{
			MethodName: "SmsCode",
			Handler:    _UserRpc_SmsCode_Handler,
		},
		{
			MethodName: "smsReg",
			Handler:    _UserRpc_SmsReg_Handler,
		},
		{
			MethodName: "identity",
			Handler:    _UserRpc_Identity_Handler,
		},
		{
			MethodName: "smsLogin",
			Handler:    _UserRpc_SmsLogin_Handler,
		},
		{
			MethodName: "autoReg",
			Handler:    _UserRpc_AutoReg_Handler,
		},
		{
			MethodName: "checkUserId",
			Handler:    _UserRpc_CheckUserId_Handler,
		},
		{
			MethodName: "smsVerify",
			Handler:    _UserRpc_SmsVerify_Handler,
		},
		{
			MethodName: "updatePwd",
			Handler:    _UserRpc_UpdatePwd_Handler,
		},
		{
			MethodName: "updateInfo",
			Handler:    _UserRpc_UpdateInfo_Handler,
		},
		{
			MethodName: "getRtmToken",
			Handler:    _UserRpc_GetRtmToken_Handler,
		},
		{
			MethodName: "getRtcToken",
			Handler:    _UserRpc_GetRtcToken_Handler,
		},
		{
			MethodName: "getAccessToken",
			Handler:    _UserRpc_GetAccessToken_Handler,
		},
		{
			MethodName: "SendRtm",
			Handler:    _UserRpc_SendRtm_Handler,
		},
		{
			MethodName: "SendRtmChannel",
			Handler:    _UserRpc_SendRtmChannel_Handler,
		},
		{
			MethodName: "applyMic",
			Handler:    _UserRpc_ApplyMic_Handler,
		},
		{
			MethodName: "approveMic",
			Handler:    _UserRpc_ApproveMic_Handler,
		},
		{
			MethodName: "rejectMic",
			Handler:    _UserRpc_RejectMic_Handler,
		},
		{
			MethodName: "applyingMicList",
			Handler:    _UserRpc_ApplyingMicList_Handler,
		},
		{
			MethodName: "OnMicersList",
			Handler:    _UserRpc_OnMicersList_Handler,
		},
		{
			MethodName: "inviteMic",
			Handler:    _UserRpc_InviteMic_Handler,
		},
		{
			MethodName: "AcceptMic",
			Handler:    _UserRpc_AcceptMic_Handler,
		},
		{
			MethodName: "declineMic",
			Handler:    _UserRpc_DeclineMic_Handler,
		},
		{
			MethodName: "removeMic",
			Handler:    _UserRpc_RemoveMic_Handler,
		},
		{
			MethodName: "stopMic",
			Handler:    _UserRpc_StopMic_Handler,
		},
		{
			MethodName: "resumeMic",
			Handler:    _UserRpc_ResumeMic_Handler,
		},
		{
			MethodName: "inviteAdmin",
			Handler:    _UserRpc_InviteAdmin_Handler,
		},
		{
			MethodName: "acceptAdmin",
			Handler:    _UserRpc_AcceptAdmin_Handler,
		},
		{
			MethodName: "declineAdmin",
			Handler:    _UserRpc_DeclineAdmin_Handler,
		},
		{
			MethodName: "removeAdmin",
			Handler:    _UserRpc_RemoveAdmin_Handler,
		},
		{
			MethodName: "roomAdminList",
			Handler:    _UserRpc_RoomAdminList_Handler,
		},
		{
			MethodName: "removeUserRoomStatus",
			Handler:    _UserRpc_RemoveUserRoomStatus_Handler,
		},
		{
			MethodName: "updateBaseInfo",
			Handler:    _UserRpc_UpdateBaseInfo_Handler,
		},
		{
			MethodName: "updateAboutMe",
			Handler:    _UserRpc_UpdateAboutMe_Handler,
		},
		{
			MethodName: "updateBackgroundImage",
			Handler:    _UserRpc_UpdateBackgroundImage_Handler,
		},
		{
			MethodName: "getUserBaseInfo",
			Handler:    _UserRpc_GetUserBaseInfo_Handler,
		},
		{
			MethodName: "selectTag",
			Handler:    _UserRpc_SelectTag_Handler,
		},
		{
			MethodName: "userFollow",
			Handler:    _UserRpc_UserFollow_Handler,
		},
		{
			MethodName: "userUnFollow",
			Handler:    _UserRpc_UserUnFollow_Handler,
		},
		{
			MethodName: "userFollowers",
			Handler:    _UserRpc_UserFollowers_Handler,
		},
		{
			MethodName: "userFollows",
			Handler:    _UserRpc_UserFollows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/user/cmd/rpc/pb/userRpc.proto",
}
