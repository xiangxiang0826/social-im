// Code generated by goctl. DO NOT EDIT.
// Source: userRpc.proto

package server

import (
	"context"

	"social-im/app/user/cmd/rpc/internal/logic"
	"social-im/app/user/cmd/rpc/internal/svc"
	"social-im/app/user/cmd/rpc/pb"
)

type UserRpcServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUserRpcServer
}

func NewUserRpcServer(svcCtx *svc.ServiceContext) *UserRpcServer {
	return &UserRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *UserRpcServer) Login(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserRpcServer) Register(ctx context.Context, in *pb.RegisterReq) (*pb.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UserRpcServer) GetUserInfo(ctx context.Context, in *pb.GetUserInfoReq) (*pb.GetUserInfoResp, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UserRpcServer) GenerateToken(ctx context.Context, in *pb.GenerateTokenReq) (*pb.GenerateTokenResp, error) {
	l := logic.NewGenerateTokenLogic(ctx, s.svcCtx)
	return l.GenerateToken(in)
}

func (s *UserRpcServer) Sms(ctx context.Context, in *pb.SmsReq) (*pb.SmsResp, error) {
	l := logic.NewSmsLogic(ctx, s.svcCtx)
	return l.Sms(in)
}

func (s *UserRpcServer) SmsCode(ctx context.Context, in *pb.SmsCodeReq) (*pb.SmsCodeResp, error) {
	l := logic.NewSmsCodeLogic(ctx, s.svcCtx)
	return l.SmsCode(in)
}

func (s *UserRpcServer) SmsReg(ctx context.Context, in *pb.SmsRegReq) (*pb.SmsRegResp, error) {
	l := logic.NewSmsRegLogic(ctx, s.svcCtx)
	return l.SmsReg(in)
}

func (s *UserRpcServer) Identity(ctx context.Context, in *pb.IdentityReq) (*pb.IdentityResp, error) {
	l := logic.NewIdentityLogic(ctx, s.svcCtx)
	return l.Identity(in)
}

func (s *UserRpcServer) SmsLogin(ctx context.Context, in *pb.SmsLoginReq) (*pb.SmsLoginResp, error) {
	l := logic.NewSmsLoginLogic(ctx, s.svcCtx)
	return l.SmsLogin(in)
}

func (s *UserRpcServer) AutoReg(ctx context.Context, in *pb.AutoRegReq) (*pb.AutoRegResp, error) {
	l := logic.NewAutoRegLogic(ctx, s.svcCtx)
	return l.AutoReg(in)
}

func (s *UserRpcServer) CheckUserId(ctx context.Context, in *pb.CheckUserIdReq) (*pb.CheckUserIdResp, error) {
	l := logic.NewCheckUserIdLogic(ctx, s.svcCtx)
	return l.CheckUserId(in)
}

func (s *UserRpcServer) SmsVerify(ctx context.Context, in *pb.SmsVerifyReq) (*pb.SmsVerifyResp, error) {
	l := logic.NewSmsVerifyLogic(ctx, s.svcCtx)
	return l.SmsVerify(in)
}

func (s *UserRpcServer) UpdatePwd(ctx context.Context, in *pb.UpdatePwdReq) (*pb.UpdatePwdResp, error) {
	l := logic.NewUpdatePwdLogic(ctx, s.svcCtx)
	return l.UpdatePwd(in)
}

func (s *UserRpcServer) UpdateInfo(ctx context.Context, in *pb.UpdateInfoReq) (*pb.UpdateInfoResp, error) {
	l := logic.NewUpdateInfoLogic(ctx, s.svcCtx)
	return l.UpdateInfo(in)
}

func (s *UserRpcServer) GetRtmToken(ctx context.Context, in *pb.GetRtmTokenReq) (*pb.GetRtmTokenResp, error) {
	l := logic.NewGetRtmTokenLogic(ctx, s.svcCtx)
	return l.GetRtmToken(in)
}

func (s *UserRpcServer) GetRtcToken(ctx context.Context, in *pb.GetRtcTokenReq) (*pb.GetRtcTokenResp, error) {
	l := logic.NewGetRtcTokenLogic(ctx, s.svcCtx)
	return l.GetRtcToken(in)
}

func (s *UserRpcServer) GetAccessToken(ctx context.Context, in *pb.GetAccessTokenReq) (*pb.GetAccessTokenResp, error) {
	l := logic.NewGetAccessTokenLogic(ctx, s.svcCtx)
	return l.GetAccessToken(in)
}

func (s *UserRpcServer) SendRtm(ctx context.Context, in *pb.SendRtmReq) (*pb.SendRtmResp, error) {
	l := logic.NewSendRtmLogic(ctx, s.svcCtx)
	return l.SendRtm(in)
}

func (s *UserRpcServer) SendRtmChannel(ctx context.Context, in *pb.SendRtmChannelReq) (*pb.SendRtmChannelResp, error) {
	l := logic.NewSendRtmChannelLogic(ctx, s.svcCtx)
	return l.SendRtmChannel(in)
}

func (s *UserRpcServer) ApplyMic(ctx context.Context, in *pb.ApplyMicReq) (*pb.ApplyMicResq, error) {
	l := logic.NewApplyMicLogic(ctx, s.svcCtx)
	return l.ApplyMic(in)
}

func (s *UserRpcServer) ApproveMic(ctx context.Context, in *pb.ApproveMicReq) (*pb.ApproveMicResp, error) {
	l := logic.NewApproveMicLogic(ctx, s.svcCtx)
	return l.ApproveMic(in)
}

func (s *UserRpcServer) RejectMic(ctx context.Context, in *pb.RejectMicReq) (*pb.RejectMicResp, error) {
	l := logic.NewRejectMicLogic(ctx, s.svcCtx)
	return l.RejectMic(in)
}

func (s *UserRpcServer) ApplyingMicList(ctx context.Context, in *pb.ApplyingMicListReq) (*pb.ApplyingMicListResp, error) {
	l := logic.NewApplyingMicListLogic(ctx, s.svcCtx)
	return l.ApplyingMicList(in)
}

func (s *UserRpcServer) OnMicersList(ctx context.Context, in *pb.OnMicersListReq) (*pb.OnMicersListResp, error) {
	l := logic.NewOnMicersListLogic(ctx, s.svcCtx)
	return l.OnMicersList(in)
}

func (s *UserRpcServer) InviteMic(ctx context.Context, in *pb.InviteMicReq) (*pb.InviteMicResp, error) {
	l := logic.NewInviteMicLogic(ctx, s.svcCtx)
	return l.InviteMic(in)
}

func (s *UserRpcServer) AcceptMic(ctx context.Context, in *pb.AcceptMicReq) (*pb.AcceptMicResq, error) {
	l := logic.NewAcceptMicLogic(ctx, s.svcCtx)
	return l.AcceptMic(in)
}

func (s *UserRpcServer) DeclineMic(ctx context.Context, in *pb.DeclineMicReq) (*pb.DeclineMicResq, error) {
	l := logic.NewDeclineMicLogic(ctx, s.svcCtx)
	return l.DeclineMic(in)
}

func (s *UserRpcServer) RemoveMic(ctx context.Context, in *pb.RemoveMicReq) (*pb.RemoveMicResp, error) {
	l := logic.NewRemoveMicLogic(ctx, s.svcCtx)
	return l.RemoveMic(in)
}

func (s *UserRpcServer) StopMic(ctx context.Context, in *pb.StopMicReq) (*pb.StopMicResp, error) {
	l := logic.NewStopMicLogic(ctx, s.svcCtx)
	return l.StopMic(in)
}

func (s *UserRpcServer) ResumeMic(ctx context.Context, in *pb.ResumeMicReq) (*pb.ResumeMicResq, error) {
	l := logic.NewResumeMicLogic(ctx, s.svcCtx)
	return l.ResumeMic(in)
}

func (s *UserRpcServer) InviteAdmin(ctx context.Context, in *pb.InviteAdminReq) (*pb.InviteAdminResq, error) {
	l := logic.NewInviteAdminLogic(ctx, s.svcCtx)
	return l.InviteAdmin(in)
}

func (s *UserRpcServer) AcceptAdmin(ctx context.Context, in *pb.AcceptAdminReq) (*pb.AcceptAdminResq, error) {
	l := logic.NewAcceptAdminLogic(ctx, s.svcCtx)
	return l.AcceptAdmin(in)
}

func (s *UserRpcServer) DeclineAdmin(ctx context.Context, in *pb.DeclineAdminReq) (*pb.DeclineAdminResq, error) {
	l := logic.NewDeclineAdminLogic(ctx, s.svcCtx)
	return l.DeclineAdmin(in)
}

func (s *UserRpcServer) RemoveAdmin(ctx context.Context, in *pb.RemoveAdminReq) (*pb.RemoveAdminResp, error) {
	l := logic.NewRemoveAdminLogic(ctx, s.svcCtx)
	return l.RemoveAdmin(in)
}

func (s *UserRpcServer) RoomAdminList(ctx context.Context, in *pb.RoomAdminListReq) (*pb.RoomAdminListResp, error) {
	l := logic.NewRoomAdminListLogic(ctx, s.svcCtx)
	return l.RoomAdminList(in)
}

func (s *UserRpcServer) RemoveUserRoomStatus(ctx context.Context, in *pb.RemoveUserRoomStatusReq) (*pb.RemoveUserRoomStatusResq, error) {
	l := logic.NewRemoveUserRoomStatusLogic(ctx, s.svcCtx)
	return l.RemoveUserRoomStatus(in)
}

func (s *UserRpcServer) UpdateBaseInfo(ctx context.Context, in *pb.UpdateBaseReq) (*pb.UpdateBaseResp, error) {
	l := logic.NewUpdateBaseInfoLogic(ctx, s.svcCtx)
	return l.UpdateBaseInfo(in)
}

func (s *UserRpcServer) UpdateAboutMe(ctx context.Context, in *pb.UpdateAboutMeReq) (*pb.UpdateAboutMeResp, error) {
	l := logic.NewUpdateAboutMeLogic(ctx, s.svcCtx)
	return l.UpdateAboutMe(in)
}

func (s *UserRpcServer) UpdateBackgroundImage(ctx context.Context, in *pb.UpdateBackgroundImageReq) (*pb.UpdateBackgroundImageResp, error) {
	l := logic.NewUpdateBackgroundImageLogic(ctx, s.svcCtx)
	return l.UpdateBackgroundImage(in)
}

func (s *UserRpcServer) GetUserBaseInfo(ctx context.Context, in *pb.GetUserBaseReq) (*pb.GetUserBaseResp, error) {
	l := logic.NewGetUserBaseInfoLogic(ctx, s.svcCtx)
	return l.GetUserBaseInfo(in)
}

func (s *UserRpcServer) SelectTag(ctx context.Context, in *pb.SelectTagReq) (*pb.SelectTagResp, error) {
	l := logic.NewSelectTagLogic(ctx, s.svcCtx)
	return l.SelectTag(in)
}

func (s *UserRpcServer) UserFollow(ctx context.Context, in *pb.RoomUsers) (*pb.CommonRespNew, error) {
	l := logic.NewUserFollowLogic(ctx, s.svcCtx)
	return l.UserFollow(in)
}

func (s *UserRpcServer) UserUnFollow(ctx context.Context, in *pb.RoomUsers) (*pb.CommonRespNew, error) {
	l := logic.NewUserUnFollowLogic(ctx, s.svcCtx)
	return l.UserUnFollow(in)
}

func (s *UserRpcServer) UserFollowers(ctx context.Context, in *pb.RoomUser) (*pb.Users, error) {
	l := logic.NewUserFollowersLogic(ctx, s.svcCtx)
	return l.UserFollowers(in)
}

func (s *UserRpcServer) UserFollows(ctx context.Context, in *pb.RoomUser) (*pb.Users, error) {
	l := logic.NewUserFollowsLogic(ctx, s.svcCtx)
	return l.UserFollows(in)
}
