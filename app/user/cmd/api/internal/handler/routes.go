// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	user "social-im/app/user/cmd/api/internal/handler/user"
	"social-im/app/user/cmd/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/sms",
				Handler: user.SmsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/smsReg",
				Handler: user.SmsRegHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/smsLogin",
				Handler: user.SmsLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/autoReg",
				Handler: user.AutoRegHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/checkUserId",
				Handler: user.CheckUserIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/updatePwd",
				Handler: user.UpdatePwdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/smsVerify",
				Handler: user.SmsVerifyHandler(serverCtx),
			},
		},
		rest.WithPrefix("/user/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/detail",
				Handler: user.DetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/identity",
				Handler: user.IdentityHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/updateInfo",
				Handler: user.UpdateInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/getRtcToken",
				Handler: user.GetRtcTokenHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/getRtmToken",
				Handler: user.GetRtmTokenHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/getAccessToken",
				Handler: user.GetAccessTokenHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/applyMic",
				Handler: user.ApplyMicHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/approveMic",
				Handler: user.ApproveMicHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/rejectMic",
				Handler: user.RejectMicHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/applyingMicList",
				Handler: user.ApplyingMicListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/onMicList",
				Handler: user.OnMicListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/inviteMic",
				Handler: user.InviteMicHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/acceptMic",
				Handler: user.AcceptMicHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/declineMic",
				Handler: user.DeclineMicHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/removeMic",
				Handler: user.RemoveMicHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/stopMic",
				Handler: user.StopMicHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/resumeMic",
				Handler: user.ResumeMicHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/inviteAdmin",
				Handler: user.InviteAdminHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/acceptAdmin",
				Handler: user.AcceptAdminHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/declineAdmin",
				Handler: user.DeclineAdminHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/roomAdminList",
				Handler: user.RoomAdminListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/removeAdmin",
				Handler: user.RemoveAdminHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/updateBaseInfo",
				Handler: user.UpdateBaseInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/updateAboutMe",
				Handler: user.UpdateAboutMeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/updateBackgroundImage",
				Handler: user.UpdateBackgroundImageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/getUserBaseInfo",
				Handler: user.GetUserBaseInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/selectTag",
				Handler: user.SelectTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/follow",
				Handler: user.UserFollowHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/unfollow",
				Handler: user.UserunFollowHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/followers",
				Handler: user.UserFollowersHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/follows",
				Handler: user.UserFollowsHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/user/v1"),
	)
}
