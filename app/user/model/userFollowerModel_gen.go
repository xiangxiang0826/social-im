// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
	"social-im/common/rediskey"
)

var (
	cacheSocialImUserFollowers = rediskey.CacheSocialImUserFollowersPrefix //粉丝
	cacheSocialImUserFollows   = rediskey.CacheSocialImUserFollowsPrefix   //关注
)

type (
	userFollowerModel interface {
		//	Insert(ctx context.Context, tx *gorm.DB, data *UserFollower) error

		//FindOne(ctx context.Context, id int64) (*User, error)
		//FindOneByMobile(ctx context.Context, mobile string) (*User, error)
		//Update(ctx context.Context, tx *gorm.DB, data *User) error

		//FindOneByUserIdentity(ctx context.Context, realName, identity string) (*User, error)
		//Delete(ctx context.Context, tx *gorm.DB, id int64) error
		//Transaction(ctx context.Context, fn func(db *gorm.DB) error) error

		UpdateUserFollow(ctx context.Context, tx *gorm.DB, room, uid, user int64) error
		UpdateUserunFollow(ctx context.Context, tx *gorm.DB, room, uid, user int64) error

		FindUserFollowers(ctx context.Context, tx *gorm.DB, room, uid int64) (*[]int64, error)
		FindUserFollows(ctx context.Context, tx *gorm.DB, room, uid int64) (*[]int64, error)
	}

	defaultUserFollowerModel struct {
		gormc.CachedConn
		table string
	}

	UserFollower struct {
		Room         int64 `gorm:"column:room"`     // 房间ID
		OneUser      int64 `gorm:"column:one_user"` // 用户名
		TheOtherUser int64 `gorm:"column:password"` // 密码
		Status       int   `gorm:"column:status"`   // 昵称

	}
)

func (UserFollower) TableName() string {
	return "user_follower"
}

func newUserFollowerModel(conn *gorm.DB, c cache.CacheConf) *defaultUserFollowerModel {
	return &defaultUserFollowerModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_follower`",
	}
}
func (m *defaultUserFollowerModel) UpdateUserFollow(ctx context.Context, tx *gorm.DB, room int64, uid int64, user int64) error {

	var delkeys []string
	keyUid := fmt.Sprintf("%s%v:%v", cacheSocialImUserFollows, room, uid)
	delkeys = append(delkeys, keyUid)
	keyUser := fmt.Sprintf("%s%v:%v", cacheSocialImUserFollowers, room, user)
	delkeys = append(delkeys, keyUser)

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Debug().Model(&UserFollower{}).Exec("call p_update_user_follow(?,?,?)", room, uid, user).Error
	}, delkeys...)

	return err

}

func (m *defaultUserFollowerModel) UpdateUserunFollow(ctx context.Context, tx *gorm.DB, room int64, uid int64, user int64) error {

	var delkeys []string
	keyUid := fmt.Sprintf("%s%v:%v", cacheSocialImUserFollows, room, uid)
	delkeys = append(delkeys, keyUid)
	keyUser := fmt.Sprintf("%s%v:%v", cacheSocialImUserFollowers, room, user)
	delkeys = append(delkeys, keyUser)

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Debug().Model(&UserFollower{}).Exec("call p_update_user_unfollow(?,?,?)", room, uid, user).Error
	}, delkeys...)

	return err
}

func (m *defaultUserFollowerModel) FindUserFollowers(ctx context.Context, tx *gorm.DB, room, uid int64) (*[]int64, error) {

	keyUidFollowers := fmt.Sprintf("%s%v:%v", cacheSocialImUserFollowers, room, uid)

	resp := []int64{}

	err := m.QueryCtx(ctx, &resp, keyUidFollowers, func(conn *gorm.DB, v interface{}) error {
		sqlRaw := "SELECT the_other_user FROM user_follower WHERE room = ? AND one_user  = ? AND  STATUS = ? " + "UNION ALL SELECT one_user FROM user_follower WHERE room  = ? AND the_other_user  = ? AND STATUS = ?"

		return conn.Debug().Model(&UserFollower{}).Raw(sqlRaw, room, uid, 2, room, uid, 1).Find(&resp).Error
	})

	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}
func (m *defaultUserFollowerModel) FindUserFollows(ctx context.Context, tx *gorm.DB, room, uid int64) (*[]int64, error) {

	keyUidFollows := fmt.Sprintf("%s%v:%v", cacheSocialImUserFollows, room, uid)

	resp := []int64{}

	err := m.QueryCtx(ctx, &resp, keyUidFollows, func(conn *gorm.DB, v interface{}) error {

		sqlRaw := "SELECT the_other_user FROM user_follower WHERE room = ? AND one_user  = ? AND  STATUS = ? " + "UNION ALL SELECT one_user FROM user_follower WHERE room  = ? AND the_other_user  = ? AND STATUS = ?"
		return conn.Model(&UserFollower{}).Raw(sqlRaw, room, uid, 1, room, uid, 2).Find(&resp).Error
	})

	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}
