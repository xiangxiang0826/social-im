// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheGvaAppUserBaseIdPrefix  = "cache:gva:appUserBase:id:"
	cacheGvaAppUserBaseUidPrefix = "cache:gva:appUserBase:uid:"
)

type (
	appUserBaseModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *AppUserBase) error

		FindOne(ctx context.Context, id int64) (*AppUserBase, error)
		FindOneByUid(ctx context.Context, uid int64) (*AppUserBase, error)
		Update(ctx context.Context, tx *gorm.DB, data *AppUserBase) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultAppUserBaseModel struct {
		gormc.CachedConn
		table string
	}

	AppUserBase struct {
		Id                 int64     `gorm:"column:id"`
		Uid                int64     `gorm:"column:uid"`              // 用户id
		BodyHeight         string    `gorm:"column:body_height"`      // 身高cm
		Constellation      string    `gorm:"column:constellation"`    // 星座
		Education          string    `gorm:"column:education"`        // 学历
		School             string    `gorm:"column:school"`           // 学校
		Career             string    `gorm:"column:career"`           // 职业
		AboutMe            string    `gorm:"column:about_me"`         // 关于我
		Hobby              string    `gorm:"column:hobby"`            // 爱好
		ProvinceId         int64     `gorm:"column:province_id"`      // 省id
		CityId             int64     `gorm:"column:city_id"`          // 市id
		DistrictId         int64     `gorm:"column:district_id"`      // 区县id
		WorkProvinceId     int64     `gorm:"column:work_province_id"` // 工作省id
		WorkCityId         int64     `gorm:"column:work_city_id"`     // 工作市id
		WorkDistrictId     int64     `gorm:"column:work_district_id"` // 工作区县id
		Address            string    `gorm:"column:address"`          // 家乡所在地
		BackgroundUrl      string    `gorm:"column:background_url"`
		BackgroundSmallUrl string    `gorm:"column:background_small_url"`
		WorkAddress        string    `gorm:"column:work_address"`   // 工作所在地
		DisplayFields      string    `gorm:"column:display_fields"` // 展示的标签字段(多个字段中间逗号隔开)
		CreatedAt          time.Time `gorm:"column:created_at"`     // 创建时间
		UpdatedAt          time.Time `gorm:"column:updated_at"`     // 更新时间
	}
)

func (AppUserBase) TableName() string {
	return "`app_user_base`"
}

func newAppUserBaseModel(conn *gorm.DB, c cache.CacheConf) *defaultAppUserBaseModel {
	return &defaultAppUserBaseModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`app_user_base`",
	}
}

func (m *defaultAppUserBaseModel) Insert(ctx context.Context, tx *gorm.DB, data *AppUserBase) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppUserBaseModel) FindOne(ctx context.Context, id int64) (*AppUserBase, error) {
	gvaAppUserBaseIdKey := fmt.Sprintf("%s%v", cacheGvaAppUserBaseIdPrefix, id)
	var resp AppUserBase
	err := m.QueryCtx(ctx, &resp, gvaAppUserBaseIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&AppUserBase{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserBaseModel) FindOneByUid(ctx context.Context, uid int64) (*AppUserBase, error) {
	gvaAppUserBaseUidKey := fmt.Sprintf("%s%v", cacheGvaAppUserBaseUidPrefix, uid)
	var resp AppUserBase
	err := m.QueryRowIndexCtx(ctx, &resp, gvaAppUserBaseUidKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&AppUserBase{}).Where("`uid` = ?", uid).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppUserBaseModel) Update(ctx context.Context, tx *gorm.DB, data *AppUserBase) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultAppUserBaseModel) getCacheKeys(data *AppUserBase) []string {
	if data == nil {
		return []string{}
	}
	gvaAppUserBaseIdKey := fmt.Sprintf("%s%v", cacheGvaAppUserBaseIdPrefix, data.Id)
	gvaAppUserBaseUidKey := fmt.Sprintf("%s%v", cacheGvaAppUserBaseUidPrefix, data.Uid)
	cacheKeys := []string{
		gvaAppUserBaseIdKey, gvaAppUserBaseUidKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultAppUserBaseModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&AppUserBase{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultAppUserBaseModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultAppUserBaseModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGvaAppUserBaseIdPrefix, primary)
}

func (m *defaultAppUserBaseModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&AppUserBase{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultAppUserBaseModel) tableName() string {
	return m.table
}
